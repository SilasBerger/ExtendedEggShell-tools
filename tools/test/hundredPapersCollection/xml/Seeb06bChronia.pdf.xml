<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002029">
<title confidence="0.8233135">
Chronia: Visualizing How Developers Change Software Systems
In Proceedings of European Conference on Software Maintenance and Reengineering (CSMR 2006)
</title>
<author confidence="0.970252">
Mauricio Seeberger Adrian Kuhn Tudor Gı̂rba
</author>
<affiliation confidence="0.917938">
Software Composition Group
University of Berne, Switzerland
</affiliation>
<sectionHeader confidence="0.553895" genericHeader="abstract">
Stéphane Ducasse
LISTIC
Université de Savoie, France
Abstract
</sectionHeader>
<bodyText confidence="0.999374125">
To understand a certain issue of the system we want to
ask the knowledgeable developers. Yet, in large systems, not
every developer is knowledgeable in all the details of the
system. Thus, we would want to know which developer is
knowledgeable in the issue at hand. In this paper we present
the Chronia tool that implements the Ownership Map visu-
alization to understand when and how different developers
interacted in which way and in which part of the system.
</bodyText>
<sectionHeader confidence="0.997992" genericHeader="method">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998849142857143">
Software systems change over time, and even if the orig-
inal documentation exists, it might not reflect the code any-
more. In such situations, it is crucial to get access to devel-
oper knowledge. As systems grow larger, not all developers
know about the entire system, thus, we need to know which
developer is knowledgeable in which part of the system.
In our approach, we assume that the original developer
of a line of code is the most knowledgeable in that line of
code. We determine the owner of a piece of code as being
the developer that owns the largest part of that piece of code.
We make use of the ownership to provide a visualization
that helps to understand how developers interacted with the
system [4].
We implemented our approach in Chronia, a tool built
on top of the Moose reengineering environment [2]. Our
aim was to provide a solution that gives fast results. Our
approach relies only on information from the CVS log with-
out needing to check out the whole repository. As a conse-
quence, we can analyze large systems in a very short period
of time, making the approach usable in the early stages of
reverse engineering.
</bodyText>
<sectionHeader confidence="0.991954" genericHeader="evaluation">
2 Chronia
</sectionHeader>
<bodyText confidence="0.999038428571429">
Figure 1 presents the details of the Ownership Map [4]:
each line represents a history of a file, and each circle on a
line represents a change to that file. The color of the circle
denotes the author that made the change. The size of the
circle reflects the size of the change, and the color of the
line denotes the author who owns most of the lines of code
of the file in that period.
</bodyText>
<subsectionHeader confidence="0.7690645">
File A
File B
</subsectionHeader>
<bodyText confidence="0.767808222222222">
commit by the green author
followed by the ownership
small commit by the blue author.
the file is still ownedby the green author
file removed by
the blue author
file present from
the first import
file created by the
</bodyText>
<figure confidence="0.912143">
green author
Time
</figure>
<figureCaption confidence="0.999339">
Figure 1. Details of the Ownership Map.
</figureCaption>
<bodyText confidence="0.988692818181818">
We implemented our approach in Chronia, a tool built on
top of the Moose reengineering environment [2]. Figure 2
emphasizes the interactive nature of our tool. Contrary to
similar approaches [5], we give a semantic order to the file
axis by clustering the files based on their history of changes:
files committed in the same period are related [3, 7].
On the left of Figure 2 we see Chronia visualizing
the overall history of the project, which provides a first
overview. Since there is too much data we cannot give the
reasoning only from this view, thus, Chronia allows for in-
teractive zooming. For example, in the window on the lower
right, we see Chronia zoomed into the bottom right part of
the original view. Furthermore, when moving the mouse
over the Ownership Map, we complement the view by also
showing the current position on both time and file axis are
highlighted in the lists on the right. These lists show all file
names and the timestamps of all commits. As Chronia is
build on top of Moose, it makes use of the Moose contex-
tual menus to open detailed views on particular files, mod-
ules or authors. For example, on the top right window we
see a view with metrics and measurements of a file revision.
The visualization reveals several patterns of developer
</bodyText>
<figure confidence="0.87601275">
1
Chronia - the overall picture
Chronia - a zoomed part and a contextual menu
Moose - details on the selected File
</figure>
<figureCaption confidence="0.985022">
Figure 2. Chronia is an interactive tool.
</figureCaption>
<bodyText confidence="0.991501375">
behavior (please refer to [4] for more details): Monologue
(one author working alone), Dialogue (two authors work-
ing together), Takeover (one author aggressively taking over
from another) etc.. For example, in the zoomed window
from Figure 2 we see how the blue lines are transformed
into green, because the green author aggressively took over
from the blue one. For more details regarding the visualiza-
tion, please refer to [4].
</bodyText>
<sectionHeader confidence="0.999698" genericHeader="conclusions">
3 Related Work
</sectionHeader>
<bodyText confidence="0.9715185">
A visualization similar to ours is used to visualize how
authors change a wiki page [6]. Ball and Eick [1] developed
multiple visualizations for showing changes that appear in
the source code. Rysselberghe and Demeyer use a scatter
plot visualization of the changes to provide an overview of
the evolution of systems and to detect patterns of change[5].
Acknowledgments. We gratefully acknowledge the financial sup-
port of the Swiss National Science Foundation for the project “RE-
CAST: Evolution of Object-Oriented Applications” (SNF Project No. 620-
066077, Sept. 2002 - Aug. 2006).
</bodyText>
<sectionHeader confidence="0.949043" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99894336">
[1] T. Ball and S. Eick. Software visualization in the large. IEEE
Computer, pages 33–43, 1996.
[2] S. Ducasse, T. Gı̂rba, M. Lanza, and S. Demeyer. Moose: a
collaborative and extensible reengineering Environment. In
Tools for Software Maintenance and Reengineering, RCOST
/ Software Technology Series, pages 55–71. Franco Angeli,
2005.
[3] H. Gall, K. Hajek, and M. Jazayeri. Detection of logical cou-
pling based on product release history. In Proceedings of
the International Conference on Software Maintenance 1998
(ICSM ’98), pages 190–198, 1998.
[4] T. Gı̂rba, A. Kuhn, M. Seeberger, and S. Ducasse. How de-
velopers drive software evolution. In Proceedings of Inter-
national Workshop on Principles of Software Evolution (IW-
PSE), pages 113–122. IEEE Computer Society Press, 2005.
[5] F. Van Rysselberghe and S. Demeyer. Studying software evo-
lution information by visualizing the change history. In Pro-
ceedings of The 20th IEEE International Conference on Soft-
ware Maintenance (ICSM 2004), Sept. 2004.
[6] F. Viégas, M. Wattenberg, and K. Dave. Studying cooperation
and conflict between authors with history flow visualizations.
In In Proceedings of the Conference on Human Factors in
Computing Systems (CHI 2004), pages 575–582, Apr. 2004.
[7] T. Zimmermann, P. Weißgerber, S. Diehl, and A. Zeller. Min-
ing version histories to guide software changes. In 26th Inter-
</reference>
<page confidence="0.609081">
2
</page>
<reference confidence="0.7962695">
national Conference on Software Engineering (ICSE 2004),
pages 563–572, 2004.
</reference>
<page confidence="0.981887">
3
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.117792">
<title confidence="0.973738">Chronia: Visualizing How Developers Change Software Systems</title>
<note confidence="0.453641">In Proceedings of European Conference on Software Maintenance and Reengineering (CSMR 2006)</note>
<author confidence="0.999046">Mauricio Seeberger Adrian Kuhn Tudor Gı̂rba</author>
<affiliation confidence="0.9274415">Software Composition Group University of Berne, Switzerland</affiliation>
<author confidence="0.519244">Stéphane Ducasse</author>
<affiliation confidence="0.8638405">LISTIC Université de Savoie, France</affiliation>
<abstract confidence="0.994834111111111">To understand a certain issue of the system we want to ask the knowledgeable developers. Yet, in large systems, not every developer is knowledgeable in all the details of the system. Thus, we would want to know which developer is knowledgeable in the issue at hand. In this paper we present the Chronia tool that implements the Ownership Map visualization to understand when and how different developers interacted in which way and in which part of the system.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>T Ball</author>
<author>S Eick</author>
</authors>
<title>Software visualization in the large.</title>
<date>1996</date>
<journal>IEEE Computer,</journal>
<pages>33--43</pages>
<marker>[1]</marker>
<rawString>T. Ball and S. Eick. Software visualization in the large. IEEE Computer, pages 33–43, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Ducasse</author>
<author>T Gırba</author>
<author>M Lanza</author>
<author>S Demeyer</author>
</authors>
<title>Moose: a collaborative and extensible reengineering Environment.</title>
<date>2005</date>
<booktitle>In Tools for Software Maintenance and Reengineering, RCOST / Software Technology Series,</booktitle>
<pages>55--71</pages>
<location>Franco Angeli,</location>
<contexts>
<context position="1612" citStr="[2]" startWordPosition="265" endWordPosition="265">er, not all developers know about the entire system, thus, we need to know which developer is knowledgeable in which part of the system. In our approach, we assume that the original developer of a line of code is the most knowledgeable in that line of code. We determine the owner of a piece of code as being the developer that owns the largest part of that piece of code. We make use of the ownership to provide a visualization that helps to understand how developers interacted with the system [4]. We implemented our approach in Chronia, a tool built on top of the Moose reengineering environment [2]. Our aim was to provide a solution that gives fast results. Our approach relies only on information from the CVS log without needing to check out the whole repository. As a consequence, we can analyze large systems in a very short period of time, making the approach usable in the early stages of reverse engineering. 2 Chronia Figure 1 presents the details of the Ownership Map [4]: each line represents a history of a file, and each circle on a line represents a change to that file. The color of the circle denotes the author that made the change. The size of the circle reflects the size of the </context>
</contexts>
<marker>[2]</marker>
<rawString>S. Ducasse, T. Gı̂rba, M. Lanza, and S. Demeyer. Moose: a collaborative and extensible reengineering Environment. In Tools for Software Maintenance and Reengineering, RCOST / Software Technology Series, pages 55–71. Franco Angeli, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Gall</author>
<author>K Hajek</author>
<author>M Jazayeri</author>
</authors>
<title>Detection of logical coupling based on product release history.</title>
<date>1998</date>
<journal>ICSM</journal>
<booktitle>In Proceedings of the International Conference on Software Maintenance</booktitle>
<volume>98</volume>
<pages>190--198</pages>
<contexts>
<context position="2966" citStr="[3, 7]" startWordPosition="512" endWordPosition="513">n author followed by the ownership small commit by the blue author. the file is still ownedby the green author file removed by the blue author file present from the first import file created by the green author Time Figure 1. Details of the Ownership Map. We implemented our approach in Chronia, a tool built on top of the Moose reengineering environment [2]. Figure 2 emphasizes the interactive nature of our tool. Contrary to similar approaches [5], we give a semantic order to the file axis by clustering the files based on their history of changes: files committed in the same period are related [3, 7]. On the left of Figure 2 we see Chronia visualizing the overall history of the project, which provides a first overview. Since there is too much data we cannot give the reasoning only from this view, thus, Chronia allows for interactive zooming. For example, in the window on the lower right, we see Chronia zoomed into the bottom right part of the original view. Furthermore, when moving the mouse over the Ownership Map, we complement the view by also showing the current position on both time and file axis are highlighted in the lists on the right. These lists show all file names and the timest</context>
</contexts>
<marker>[3]</marker>
<rawString>H. Gall, K. Hajek, and M. Jazayeri. Detection of logical coupling based on product release history. In Proceedings of the International Conference on Software Maintenance 1998 (ICSM ’98), pages 190–198, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Gırba</author>
<author>A Kuhn</author>
<author>M Seeberger</author>
<author>S Ducasse</author>
</authors>
<title>How developers drive software evolution.</title>
<date>2005</date>
<booktitle>In Proceedings of International Workshop on Principles of Software Evolution (IWPSE),</booktitle>
<pages>113--122</pages>
<publisher>IEEE Computer Society Press,</publisher>
<contexts>
<context position="1508" citStr="[4]" startWordPosition="248" endWordPosition="248">de anymore. In such situations, it is crucial to get access to developer knowledge. As systems grow larger, not all developers know about the entire system, thus, we need to know which developer is knowledgeable in which part of the system. In our approach, we assume that the original developer of a line of code is the most knowledgeable in that line of code. We determine the owner of a piece of code as being the developer that owns the largest part of that piece of code. We make use of the ownership to provide a visualization that helps to understand how developers interacted with the system [4]. We implemented our approach in Chronia, a tool built on top of the Moose reengineering environment [2]. Our aim was to provide a solution that gives fast results. Our approach relies only on information from the CVS log without needing to check out the whole repository. As a consequence, we can analyze large systems in a very short period of time, making the approach usable in the early stages of reverse engineering. 2 Chronia Figure 1 presents the details of the Ownership Map [4]: each line represents a history of a file, and each circle on a line represents a change to that file. The color</context>
<context position="4074" citStr="[4]" startWordPosition="711" endWordPosition="711"> axis are highlighted in the lists on the right. These lists show all file names and the timestamps of all commits. As Chronia is build on top of Moose, it makes use of the Moose contextual menus to open detailed views on particular files, modules or authors. For example, on the top right window we see a view with metrics and measurements of a file revision. The visualization reveals several patterns of developer 1 Chronia - the overall picture Chronia - a zoomed part and a contextual menu Moose - details on the selected File Figure 2. Chronia is an interactive tool. behavior (please refer to [4] for more details): Monologue (one author working alone), Dialogue (two authors working together), Takeover (one author aggressively taking over from another) etc.. For example, in the zoomed window from Figure 2 we see how the blue lines are transformed into green, because the green author aggressively took over from the blue one. For more details regarding the visualization, please refer to [4]. 3 Related Work A visualization similar to ours is used to visualize how authors change a wiki page [6]. Ball and Eick [1] developed multiple visualizations for showing changes that appear in the sour</context>
</contexts>
<marker>[4]</marker>
<rawString>T. Gı̂rba, A. Kuhn, M. Seeberger, and S. Ducasse. How developers drive software evolution. In Proceedings of International Workshop on Principles of Software Evolution (IWPSE), pages 113–122. IEEE Computer Society Press, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Van Rysselberghe</author>
<author>S Demeyer</author>
</authors>
<title>Studying software evolution information by visualizing the change history.</title>
<date>2004</date>
<booktitle>In Proceedings of The 20th IEEE International Conference on Software Maintenance (ICSM</booktitle>
<contexts>
<context position="2810" citStr="[5]" startWordPosition="484" endWordPosition="484"> the change, and the color of the line denotes the author who owns most of the lines of code of the file in that period. File A File B commit by the green author followed by the ownership small commit by the blue author. the file is still ownedby the green author file removed by the blue author file present from the first import file created by the green author Time Figure 1. Details of the Ownership Map. We implemented our approach in Chronia, a tool built on top of the Moose reengineering environment [2]. Figure 2 emphasizes the interactive nature of our tool. Contrary to similar approaches [5], we give a semantic order to the file axis by clustering the files based on their history of changes: files committed in the same period are related [3, 7]. On the left of Figure 2 we see Chronia visualizing the overall history of the project, which provides a first overview. Since there is too much data we cannot give the reasoning only from this view, thus, Chronia allows for interactive zooming. For example, in the window on the lower right, we see Chronia zoomed into the bottom right part of the original view. Furthermore, when moving the mouse over the Ownership Map, we complement the vi</context>
</contexts>
<marker>[5]</marker>
<rawString>F. Van Rysselberghe and S. Demeyer. Studying software evolution information by visualizing the change history. In Proceedings of The 20th IEEE International Conference on Software Maintenance (ICSM 2004), Sept. 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Viegas</author>
<author>M Wattenberg</author>
<author>K Dave</author>
</authors>
<title>Studying cooperation and conflict between authors with history flow visualizations. In</title>
<date>2004</date>
<booktitle>In Proceedings of the Conference on Human Factors in Computing Systems (CHI 2004),</booktitle>
<pages>575--582</pages>
<marker>[6]</marker>
<rawString>F. Viégas, M. Wattenberg, and K. Dave. Studying cooperation and conflict between authors with history flow visualizations. In In Proceedings of the Conference on Human Factors in Computing Systems (CHI 2004), pages 575–582, Apr. 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Zimmermann</author>
<author>P Weißgerber</author>
<author>S Diehl</author>
<author>A Zeller</author>
</authors>
<title>Mining version histories to guide software changes.</title>
<date>2004</date>
<booktitle>In 26th International Conference on Software Engineering (ICSE 2004),</booktitle>
<pages>563--572</pages>
<contexts>
<context position="2966" citStr="[3, 7]" startWordPosition="512" endWordPosition="513">n author followed by the ownership small commit by the blue author. the file is still ownedby the green author file removed by the blue author file present from the first import file created by the green author Time Figure 1. Details of the Ownership Map. We implemented our approach in Chronia, a tool built on top of the Moose reengineering environment [2]. Figure 2 emphasizes the interactive nature of our tool. Contrary to similar approaches [5], we give a semantic order to the file axis by clustering the files based on their history of changes: files committed in the same period are related [3, 7]. On the left of Figure 2 we see Chronia visualizing the overall history of the project, which provides a first overview. Since there is too much data we cannot give the reasoning only from this view, thus, Chronia allows for interactive zooming. For example, in the window on the lower right, we see Chronia zoomed into the bottom right part of the original view. Furthermore, when moving the mouse over the Ownership Map, we complement the view by also showing the current position on both time and file axis are highlighted in the lists on the right. These lists show all file names and the timest</context>
</contexts>
<marker>[7]</marker>
<rawString>T. Zimmermann, P. Weißgerber, S. Diehl, and A. Zeller. Mining version histories to guide software changes. In 26th International Conference on Software Engineering (ICSE 2004), pages 563–572, 2004.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>
<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.003022">
<figure confidence="0.261439666666667">
SNiFF+ Talks to Rational Rose 1 / 4
SNiFF+ Talks to Rational Rose
Interoperability using a Common Exchange Model
</figure>
<author confidence="0.762686">
Sander Tichelaar and Serge Demeyer,
</author>
<affiliation confidence="0.842678">
Software Composition Group, University of Berne, Switzerland,
</affiliation>
<email confidence="0.976649">
{tichel,demeyer}@iam.unibe.ch
</email>
<sectionHeader confidence="0.988123" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9958626">
Nowadays development environments are required to be open: users want to be able to work with a
combination of their preferred commercial and home-grown tools. TakeFive has opened up SNiFF+
with a so-called &amp;quot;Symbol Table API&amp;quot;; Rational has opened up the UML tool Rose via the so-called
&amp;quot;Rose Extensibility Interface (REI)&amp;quot;. On the other hand, efforts are underway to define standards for
exchanging information between case-tools; CDIF being a notable example. This paper reports on our
experience to generate UML diagrams in Rational Rose from the symbol table in SNiFF+ using a
standard CDIF exchange format.
More information on the model and the SNiFF+ extractor is available at:
http://www.iam.unibe.ch/~famoos/InfoExchFormat/.
All comments are welcome: famoos@iam.unibe.ch.
</bodyText>
<sectionHeader confidence="0.991002" genericHeader="keywords">
1) Introduction
</sectionHeader>
<bodyText confidence="0.98544037037037">
Tool interoperability is becoming of more and more importance. Developers want their favourite
environment for their favourite programming language and might use in parallel some external tools,
for instance, for program analysis, visualisation, task automation, etc.
SNiFF+ provides an open development environment: users are able to use the environment and
seamlessly integrate their preferred debuggers, compilers, versioning system, editors, etc. Apart from
that SNiFF+ provides an API to access the symbol table of SNiFF+ projects. This allows for external
programs to retrieve information such &amp;quot;what are the classes in this project?&amp;quot;, &amp;quot;what is the superclass
of this class?&amp;quot;, etc.
We use this information to produce UML [Booc96a] diagrams in Rational Rose. An extractor called
sniff2cdif extracts the needed information using the API and puts it in an industry standard
representation for exchanging information between CASE tools called CDIF [CDIF94a]. This
intermediate format is then converted into VisualBasic calls to Rational Rose’s Extensibility Interface
(REI).
The intermediate format is based on a model to describe object-oriented source code in a language
independent way. We use this model to integrate a whole set of tools for visualisation, metrics &amp;
heuristics and other analysis tasks.
In this paper we first show how we use Rational Rose to produce UML diagrams of SNiFF+ projects.
Afterwards we give a quick introduction to the Information Exchange Model that is used for the
intermediate format and its representation in the industry standard CDIF.
2) From SNiFF+ to Rational Rose
We have developed a program, sniff2cdif, that extracts the information from SNiFF+ by querying its
symbol table. The SNiFF+ Symbol Table API provides a set of C functions that give access to the
SNiFF+ Talks to Rational Rose 2 / 4
symbol table data structure. Partly there are a set of pre-defined queries, partly the data structure of
the symbol table itself can be walked through. Using the API the main information for the model is
extracted and put in the CDIF format. We feed this CDIF format into an other program, in our
example a script that transforms the information to something Rational Rose understands (see Figure
</bodyText>
<figure confidence="0.979857166666667">
1).
61L))
&amp;&amp;apos;,)
VQLIIFGLI FRQYHUWHU
5DWLRQDO
5RVH
</figure>
<figureCaption confidence="0.99975">
Figure 1: SNiFF+ connection to Rational Rose
</figureCaption>
<bodyText confidence="0.978833833333333">
The information we extract from the symbol table is based on a model that describes object-oriented
source code in a language-independent way (see section 3)). The SNiFF+ symbol table provides a lot
of the information that is described in this model. Especially convenient is the fact that SNiFF+
provides queries to extract information about which method calls with method and which attribute is
accessed by which method (which is actually the information SNiFF+ uses itself for its reference
browser).
The output of sniff2cdif is a file that contains the data in CDIF, a conveniently queryable ASCII
format, which is an industry standard for exchanging information between CASE tools. Once we
have this language independent format we either feed it to a tool that understands the format, or
convert it into a format a tool understands. In our example we convert it to VisualBasic calls that the
UML tool Rational Rose understands. Running this VisualBasic in Rational Rose produces a UML
diagram of the SNiFF+ project.
</bodyText>
<sectionHeader confidence="0.749729" genericHeader="introduction">
3) The Information Exchange Model
</sectionHeader>
<subsectionHeader confidence="0.748949">
2.1 The Conception
</subsectionHeader>
<bodyText confidence="0.997718142857143">
Many tools have been and are being developed to support developers in performing activities such as
visualisation, metrics &amp; heuristics and system reorganisation. However, systems are written in
different implementation languages (C++, Ada, Smalltalk and even Java). To avoid equipping all of
the tools with parsing technology for all of the implementation languages, we have developed a
model for information exchange between reengineering tools.
The model is a language independent representation of object-oriented sources and should provide
enough information for the reengineering tasks of the tools (see Figure 2).
</bodyText>
<figure confidence="0.991441642857143">
SNiFF+ Talks to Rational Rose 3 / 4
Visualisation
PROTOTYPES
Common
Format
Language
Plug-ins Reorganisation
Heuristics
Metrics
Smalltalk
Java
Ada
C++
LANGUAGES
</figure>
<figureCaption confidence="0.999174">
Figure 2: Conception of the Exchange Format
</figureCaption>
<bodyText confidence="0.997663666666667">
However, we cannot know in advance all information that is needed. Therefore, the model is
extensible in a couple of ways. First, tools may need to work on the language specific issues of a
system. Therefore, we allow language plug-ins that extend the model with language-specific items,
but don’t break the language independent tools. Second, we allow tool plug-ins to extend the model so
tools can, for instance, store analysis results or layout information for graphs, again without breaking
other tools.
</bodyText>
<subsectionHeader confidence="0.993785">
2.2 The Core Model
</subsectionHeader>
<bodyText confidence="0.788997625">
The core model consists of the main OO entities, namely Class, Method, Attribute and
InheritanceDefinition (see Figure 3). For reengineering we need the other two, the
associations Invocation and Access. An Invocation represents the definition of a Method
calling another Method and an Access represents a Method accessing an Attribute1. These
abstractions are needed for reengineering tasks such as dependency analysis, metrics computation and
reengineering operation. Typical questions we need answers for are: “are entities strongly coupled?”,
“which methods are never invoked?”, “I change this method. Where do I need to change the
invocations on this method?”.
</bodyText>
<figure confidence="0.9562601">
Class
InheritanceDefinition
Method Attribute
AccessInvocation
subclass
superclass
belongsToClass
accessedIncandidates accesses
invokedBy
belongsToClass
</figure>
<figureCaption confidence="0.999948">
Figure 3: The Core Model
</figureCaption>
<bodyText confidence="0.971669">
A complete description can be found in [Deme98].
1 Actually, the complete model is more general: an Invocation is about behavioural entities (such as methods
and functions) calling other behavioural entities and an Access is about a behavioural entity accessing a
structural entity (such as attributes and global variables).
SNiFF+ Talks to Rational Rose 4 / 4
4) CDIF as Interchange Format
We have adopted CDIF [CDIF94a] as the basis for the information exchange of information in the
FAMOOS exchange model. CDIF is an industrial standard for transferring models created with
different tools. The main reasons for adopting CDIF are, that firstly it is an industry standard, and
secondly it has a standard plain text encoding which tackles the requirements of convenient querying
and human readability. Next to that the CDIF framework supports the extensibility we need to define
our model and language plug-ins. An example:
</bodyText>
<figure confidence="0.983358903225807">
(Class FM1
(name “Widget”)
(uniqueName “gui::Widget”)
)
...
(Attribute FM5
(name &amp;quot;wTop&amp;quot;)
(uniqueName “gui::Widget.wTop”)
(belongsToClass “gui::Widget”)
)
...
(Method FM8
(name “print”)
(uniqueName “gui::Widget.print()”)
(belongsToClass “gui::Widget”)
)
...
(Access FM12
(accesses “gui::Widget.wTop”)
(accessedBy “gui::Widget.print()”)
)
package gui;
class Widget {
int wTop;
…
void print() {
System.out.println(
“Top = “ + wTop);
}
}
5) Conclusion
</figure>
<bodyText confidence="0.971518285714286">
In this paper we have shown how we use the SNiFF+ symbol table API to extract information from
SNiFF+ projects. We have used this information to produce UML diagrams in Rational Rose. The
exchange of information between those two tools is based on a language-independent representation
of object-oriented source code. Actually, any tool that can understand the intermediate format can be
integrated with SNiFF+. Besides the connection with Rational Rose, our group is currently working
on metrics and graph tools that work on the same intermediate format and therefore can also be used
together with SNiFF+.
</bodyText>
<sectionHeader confidence="0.962902" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.994590333333333">
This work has been funded by the Swiss Government under Project no. NFS-2000-46947.96 and BBW-96.0015
as well as by the European Union under the ESPRIT IV programme Project no. 21975 (FAMOOS, see
http://www.iam.unibe.ch/~famoos/).
</bodyText>
<sectionHeader confidence="0.988306" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9989865">
[Booc96a] Booch, G., Jacobson, I. and Rumbaugh, J, The Unified Modelling Language for Object-
Oriented Development. See http://www.rational.com/.
[CDIF94a] CDIF Technical Committee, &amp;quot;CDIF Framework for Modeling and Extensibility&amp;quot;, Electronic
Industries Assocaiation, EIA/IS-107, January 1994. See http://www.cdif.org/.
[Deme98] Serge Demeyer and Sander Tichelaar, &amp;quot;Definition of the FAMOOS Information Exchange
Model - Version 1.1&amp;quot;, Technical Report, 1998. See http://www.iam.unibe.ch/~famoos/InfoExchFormat/.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.128877">
<title confidence="0.785586333333333">SNiFF+ Talks to Rational Rose 1 / 4 SNiFF+ Talks to Rational Rose Interoperability using a Common Exchange Model</title>
<author confidence="0.997331">Sander Tichelaar</author>
<author confidence="0.997331">Serge Demeyer</author>
<affiliation confidence="0.930439">Software Composition Group, University of Berne, Switzerland,</affiliation>
<email confidence="0.985514">tichel@iam.unibe.ch</email>
<email confidence="0.985514">demeyer@iam.unibe.ch</email>
<abstract confidence="0.999201625">Nowadays development environments are required to be open: users want to be able to work with a combination of their preferred commercial and home-grown tools. TakeFive has opened up SNiFF+ with a so-called &amp;quot;Symbol Table API&amp;quot;; Rational has opened up the UML tool Rose via the so-called &amp;quot;Rose Extensibility Interface (REI)&amp;quot;. On the other hand, efforts are underway to define standards for exchanging information between case-tools; CDIF being a notable example. This paper reports on our experience to generate UML diagrams in Rational Rose from the symbol table in SNiFF+ using a standard CDIF exchange format.</abstract>
<note confidence="0.559447">More information on the model and the SNiFF+ extractor is available at:</note>
<web confidence="0.580214">http://www.iam.unibe.ch/~famoos/InfoExchFormat/.</web>
<note confidence="0.934029">All comments are welcome: famoos@iam.unibe.ch.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>G Booch</author>
<author>I Jacobson</author>
<author>J Rumbaugh</author>
</authors>
<title>The Unified Modelling Language for ObjectOriented Development. See http://www.rational.com/.</title>
<contexts>
<context position="1780" citStr="[Booc96a]" startWordPosition="255" endWordPosition="255"> programming language and might use in parallel some external tools, for instance, for program analysis, visualisation, task automation, etc. SNiFF+ provides an open development environment: users are able to use the environment and seamlessly integrate their preferred debuggers, compilers, versioning system, editors, etc. Apart from that SNiFF+ provides an API to access the symbol table of SNiFF+ projects. This allows for external programs to retrieve information such &amp;quot;what are the classes in this project?&amp;quot;, &amp;quot;what is the superclass of this class?&amp;quot;, etc. We use this information to produce UML [Booc96a] diagrams in Rational Rose. An extractor called sniff2cdif extracts the needed information using the API and puts it in an industry standard representation for exchanging information between CASE tools called CDIF [CDIF94a]. This intermediate format is then converted into VisualBasic calls to Rational Rose’s Extensibility Interface (REI). The intermediate format is based on a model to describe object-oriented source code in a language independent way. We use this model to integrate a whole set of tools for visualisation, metrics &amp; heuristics and other analysis tasks. In this paper we first sho</context>
</contexts>
<marker>[Booc96a]</marker>
<rawString>Booch, G., Jacobson, I. and Rumbaugh, J, The Unified Modelling Language for ObjectOriented Development. See http://www.rational.com/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>CDIF Technical</author>
</authors>
<title>Committee, &amp;quot;CDIF Framework for Modeling and Extensibility&amp;quot;,</title>
<date>1994</date>
<booktitle>Electronic Industries Assocaiation, EIA/IS-107,</booktitle>
<note>See http://www.cdif.org/.</note>
<contexts>
<context position="2003" citStr="[CDIF94a]" startWordPosition="287" endWordPosition="287">nment and seamlessly integrate their preferred debuggers, compilers, versioning system, editors, etc. Apart from that SNiFF+ provides an API to access the symbol table of SNiFF+ projects. This allows for external programs to retrieve information such &amp;quot;what are the classes in this project?&amp;quot;, &amp;quot;what is the superclass of this class?&amp;quot;, etc. We use this information to produce UML [Booc96a] diagrams in Rational Rose. An extractor called sniff2cdif extracts the needed information using the API and puts it in an industry standard representation for exchanging information between CASE tools called CDIF [CDIF94a]. This intermediate format is then converted into VisualBasic calls to Rational Rose’s Extensibility Interface (REI). The intermediate format is based on a model to describe object-oriented source code in a language independent way. We use this model to integrate a whole set of tools for visualisation, metrics &amp; heuristics and other analysis tasks. In this paper we first show how we use Rational Rose to produce UML diagrams of SNiFF+ projects. Afterwards we give a quick introduction to the Information Exchange Model that is used for the intermediate format and its representation in the industr</context>
<context position="7066" citStr="[CDIF94a]" startWordPosition="1069" endWordPosition="1069"> method?”. Class InheritanceDefinition Method Attribute AccessInvocation subclass superclass belongsToClass accessedIncandidates accesses invokedBy belongsToClass Figure 3: The Core Model A complete description can be found in [Deme98]. 1 Actually, the complete model is more general: an Invocation is about behavioural entities (such as methods and functions) calling other behavioural entities and an Access is about a behavioural entity accessing a structural entity (such as attributes and global variables). SNiFF+ Talks to Rational Rose 4 / 4 4) CDIF as Interchange Format We have adopted CDIF [CDIF94a] as the basis for the information exchange of information in the FAMOOS exchange model. CDIF is an industrial standard for transferring models created with different tools. The main reasons for adopting CDIF are, that firstly it is an industry standard, and secondly it has a standard plain text encoding which tackles the requirements of convenient querying and human readability. Next to that the CDIF framework supports the extensibility we need to define our model and language plug-ins. An example: (Class FM1 (name “Widget”) (uniqueName “gui::Widget”) ) ... (Attribute FM5 (name &amp;quot;wTop&amp;quot;) (unique</context>
</contexts>
<marker>[CDIF94a]</marker>
<rawString>CDIF Technical Committee, &amp;quot;CDIF Framework for Modeling and Extensibility&amp;quot;, Electronic Industries Assocaiation, EIA/IS-107, January 1994. See http://www.cdif.org/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Serge Demeyer</author>
<author>Sander Tichelaar</author>
</authors>
<title>Definition of the FAMOOS Information Exchange Model - Version 1.1&amp;quot;,</title>
<date>1998</date>
<tech>Technical Report,</tech>
<note>See http://www.iam.unibe.ch/~famoos/InfoExchFormat/.</note>
<contexts>
<context position="6692" citStr="[Deme98]" startWordPosition="1010" endWordPosition="1010"> an Access represents a Method accessing an Attribute1. These abstractions are needed for reengineering tasks such as dependency analysis, metrics computation and reengineering operation. Typical questions we need answers for are: “are entities strongly coupled?”, “which methods are never invoked?”, “I change this method. Where do I need to change the invocations on this method?”. Class InheritanceDefinition Method Attribute AccessInvocation subclass superclass belongsToClass accessedIncandidates accesses invokedBy belongsToClass Figure 3: The Core Model A complete description can be found in [Deme98]. 1 Actually, the complete model is more general: an Invocation is about behavioural entities (such as methods and functions) calling other behavioural entities and an Access is about a behavioural entity accessing a structural entity (such as attributes and global variables). SNiFF+ Talks to Rational Rose 4 / 4 4) CDIF as Interchange Format We have adopted CDIF [CDIF94a] as the basis for the information exchange of information in the FAMOOS exchange model. CDIF is an industrial standard for transferring models created with different tools. The main reasons for adopting CDIF are, that firstly </context>
</contexts>
<marker>[Deme98]</marker>
<rawString>Serge Demeyer and Sander Tichelaar, &amp;quot;Definition of the FAMOOS Information Exchange Model - Version 1.1&amp;quot;, Technical Report, 1998. See http://www.iam.unibe.ch/~famoos/InfoExchFormat/.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>
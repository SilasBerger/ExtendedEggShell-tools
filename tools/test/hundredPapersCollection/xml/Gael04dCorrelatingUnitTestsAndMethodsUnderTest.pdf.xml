<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.013622">
<title confidence="0.488715">
Correlating Unit Tests and Methods under Test
</title>
<author confidence="0.389747">
Markus Gälli
</author>
<affiliation confidence="0.350065">
Software Composition Group
</affiliation>
<address confidence="0.238516">
University Bern
</address>
<email confidence="0.654802">
gaelli@iam.unibe.ch
</email>
<footnote confidence="0.370762">
1 Keywords: unit tests, methods under test, method examples, test scenarios, traits
</footnote>
<bodyText confidence="0.9949983">
Research Questions:What are the relationships between unit tests and between unit tests and methods
under test? What can be gained by making this relationships explicit? How does the concept of method
examples compare with other possible techniques to relate this entities?
Significant problems and current solutions: (1.) Missing explicit relationships between unit tests and
methods under test make it difficult to trace which features are thoroughly tested and hinder navigability
between unit tests and their methods under test. xUnit uses a naming convention which is brittle when
it comes to renaming the methods and classes under test. (2.) Schuh et al. [1] introduce the concept of
ObjectMother to compose complex test scenarios. (3.) Failing unit tests are presented randomly and not in
a meaningful order. [2]
Definition: A method example tests a single method and returns the resulting receiver, parameters
and potential return value of its method under test.
Approach: Show which kind of relations between unit tests and between unit tests and method under
tests exist. Correlate the unit tests of the base system of Squeak by decomposing them into method examples.
Show, that the single concept of method examples enables navigation and traceability between unit tests and
methods under test, provides concrete types for the methods under test, fits well together with traits [3],
and allows the composition of complex unit tests. Compare with other techniques to make this relationships
explicit.
Achieved Results: Case studies show that a significant amount of the relationships between unit tests
cover each other when one compares the sets of signatures of their called messages [2], and that the Squeak
base unit tests can be successfully refactored to method examples.
</bodyText>
<sectionHeader confidence="0.917009" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.934286">
We gratefully acknowledge the financial support of the Swiss National Science Foundation for the project
“Tools and Techniques for Decomposing and Composing Software” (SNF Project No. 2000-067855.02, Oct.
2002 - Sept. 2004).
</bodyText>
<sectionHeader confidence="0.963906" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.873608285714286">
1. Schuh, P.: Recovery, redemption and Extreme Programming. IEEE Computer 18 (2001) 34–41
2. Gälli, M., Nierstrasz, O., Wuyts, R.: Partial ordering tests by coverage sets. Technical Report IAM-03-013, Institut
für Informatik, Universität Bern, Switzerland (2003) Technical Report.
3. Schärli, N., Ducasse, S., Nierstrasz, O., Black, A.: Traits: Composable units of behavior. In: Proceedings ECOOP
2003. Volume 2743 of LNCS., Springer Verlag (2003) 248–274
1 5th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 2004)
LNCS page 317
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.472528">
<title confidence="0.999149">Correlating Unit Tests and Methods under Test</title>
<author confidence="0.999982">Markus Gälli</author>
<affiliation confidence="0.999325">Software Composition Group University Bern</affiliation>
<abstract confidence="0.971178333333333">gaelli@iam.unibe.ch 1 Keywords: unit tests, methods under test, method examples, test scenarios, traits Research Questions:What are the relationships between unit tests and between unit tests and methods under test? What can be gained by making this relationships explicit? How does the concept of method examples compare with other possible techniques to relate this entities? Significant problems and current solutions: (1.) Missing explicit relationships between unit tests and methods under test make it difficult to trace which features are thoroughly tested and hinder navigability between unit tests and their methods under test. xUnit uses a naming convention which is brittle when it comes to renaming the methods and classes under test. (2.) Schuh et al. [1] introduce the concept of ObjectMother to compose complex test scenarios. (3.) Failing unit tests are presented randomly and not in a meaningful order. [2] Definition: A method example tests a single method and returns the resulting receiver, parameters and potential return value of its method under test. Approach: Show which kind of relations between unit tests and between unit tests and method under tests exist. Correlate the unit tests of the base system of Squeak by decomposing them into method examples. Show, that the single concept of method examples enables navigation and traceability between unit tests and methods under test, provides concrete types for the methods under test, fits well together with traits [3], and allows the composition of complex unit tests. Compare with other techniques to make this relationships explicit. Achieved Results: Case studies show that a significant amount of the relationships between unit tests cover each other when one compares the sets of signatures of their called messages [2], and that the Squeak base unit tests can be successfully refactored to method examples. Acknowledgments We gratefully acknowledge the financial support of the Swiss National Science Foundation for the project</abstract>
<note confidence="0.9688893">Tools and Techniques for Decomposing and Composing Software” (SNF Project No. 2000-067855.02, Oct. 2002 - Sept. 2004). References 1. Schuh, P.: Recovery, redemption and Extreme Programming. IEEE Computer 18 (2001) 34–41 2. Gälli, M., Nierstrasz, O., Wuyts, R.: Partial ordering tests by coverage sets. Technical Report IAM-03-013, Institut für Informatik, Universität Bern, Switzerland (2003) Technical Report. 3. Schärli, N., Ducasse, S., Nierstrasz, O., Black, A.: Traits: Composable units of behavior. In: Proceedings ECOOP 2003. Volume 2743 of LNCS., Springer Verlag (2003) 248–274 1 5th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 2004) LNCS page 317</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>P Schuh</author>
</authors>
<title>Recovery, redemption and Extreme Programming.</title>
<date>2001</date>
<journal>IEEE Computer</journal>
<volume>18</volume>
<pages>34--41</pages>
<contexts>
<context position="871" citStr="[1]" startWordPosition="128" endWordPosition="128">sts and between unit tests and methods under test? What can be gained by making this relationships explicit? How does the concept of method examples compare with other possible techniques to relate this entities? Significant problems and current solutions: (1.) Missing explicit relationships between unit tests and methods under test make it difficult to trace which features are thoroughly tested and hinder navigability between unit tests and their methods under test. xUnit uses a naming convention which is brittle when it comes to renaming the methods and classes under test. (2.) Schuh et al. [1] introduce the concept of ObjectMother to compose complex test scenarios. (3.) Failing unit tests are presented randomly and not in a meaningful order. [2] Definition: A method example tests a single method and returns the resulting receiver, parameters and potential return value of its method under test. Approach: Show which kind of relations between unit tests and between unit tests and method under tests exist. Correlate the unit tests of the base system of Squeak by decomposing them into method examples. Show, that the single concept of method examples enables navigation and traceability b</context>
</contexts>
<marker>1.</marker>
<rawString>Schuh, P.: Recovery, redemption and Extreme Programming. IEEE Computer 18 (2001) 34–41</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Galli</author>
<author>O Nierstrasz</author>
<author>R Wuyts</author>
</authors>
<title>Partial ordering tests by coverage sets.</title>
<date>2003</date>
<tech>Technical Report IAM-03-013,</tech>
<institution>Institut fur Informatik, Universitat Bern,</institution>
<contexts>
<context position="1026" citStr="[2]" startWordPosition="152" endWordPosition="152">e with other possible techniques to relate this entities? Significant problems and current solutions: (1.) Missing explicit relationships between unit tests and methods under test make it difficult to trace which features are thoroughly tested and hinder navigability between unit tests and their methods under test. xUnit uses a naming convention which is brittle when it comes to renaming the methods and classes under test. (2.) Schuh et al. [1] introduce the concept of ObjectMother to compose complex test scenarios. (3.) Failing unit tests are presented randomly and not in a meaningful order. [2] Definition: A method example tests a single method and returns the resulting receiver, parameters and potential return value of its method under test. Approach: Show which kind of relations between unit tests and between unit tests and method under tests exist. Correlate the unit tests of the base system of Squeak by decomposing them into method examples. Show, that the single concept of method examples enables navigation and traceability between unit tests and methods under test, provides concrete types for the methods under test, fits well together with traits [3], and allows the compositio</context>
</contexts>
<marker>2.</marker>
<rawString>Gälli, M., Nierstrasz, O., Wuyts, R.: Partial ordering tests by coverage sets. Technical Report IAM-03-013, Institut für Informatik, Universität Bern, Switzerland (2003) Technical Report.</rawString>
</citation>
<citation valid="false">
<authors>
<author>N Scharli</author>
<author>S Ducasse</author>
<author>O Nierstrasz</author>
<author>Black</author>
</authors>
<title>A.: Traits: Composable units of behavior. In:</title>
<booktitle>Proceedings ECOOP</booktitle>
<contexts>
<context position="1599" citStr="[3]" startWordPosition="242" endWordPosition="242">not in a meaningful order. [2] Definition: A method example tests a single method and returns the resulting receiver, parameters and potential return value of its method under test. Approach: Show which kind of relations between unit tests and between unit tests and method under tests exist. Correlate the unit tests of the base system of Squeak by decomposing them into method examples. Show, that the single concept of method examples enables navigation and traceability between unit tests and methods under test, provides concrete types for the methods under test, fits well together with traits [3], and allows the composition of complex unit tests. Compare with other techniques to make this relationships explicit. Achieved Results: Case studies show that a significant amount of the relationships between unit tests cover each other when one compares the sets of signatures of their called messages [2], and that the Squeak base unit tests can be successfully refactored to method examples. Acknowledgments We gratefully acknowledge the financial support of the Swiss National Science Foundation for the project “Tools and Techniques for Decomposing and Composing Software” (SNF Project No. 2000</context>
</contexts>
<marker>3.</marker>
<rawString>Schärli, N., Ducasse, S., Nierstrasz, O., Black, A.: Traits: Composable units of behavior. In: Proceedings ECOOP</rawString>
</citation>
<citation valid="true">
<authors>
<author>LNCS</author>
</authors>
<date>2003</date>
<booktitle>248–274 1 5th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 2004) LNCS</booktitle>
<volume>2743</volume>
<pages>317</pages>
<publisher>Springer Verlag</publisher>
<marker>2003.</marker>
<rawString>Volume 2743 of LNCS., Springer Verlag (2003) 248–274 1 5th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 2004) LNCS page 317</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>
<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9859925">
A Quantitative Analysis of Developer Information Needs
in Software Ecosystems
</title>
<author confidence="0.989964">
Nicole Haenni, Mircea Lungu, Niko Schwarz, Oscar Nierstrasz
</author>
<affiliation confidence="0.68471">
University of Bern
Switzerland
</affiliation>
<email confidence="0.75333">
http://scg.unibe.ch
</email>
<sectionHeader confidence="0.910532" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.998156818181818">
We present the results of an investigation into the nature
of information needs of software developers who work in
projects that are part of larger ecosystems. This work is
based on a quantitative survey of 75 professional software
developers. We corroborate the results identified in the sur-
vey with needs and motivations proposed in a previous sur-
vey and discover that tool support for developers working in
an ecosystem context is even more meager than we thought:
mailing lists and internet search are the most popular tools
developers use to satisfy their ecosystem-related information
needs.
</bodyText>
<sectionHeader confidence="0.993583" genericHeader="categories and subject descriptors">
Categories and Subject Descriptors
</sectionHeader>
<category confidence="0.851429">
D.2.7 [Software Engineering]: Distribution, Maintenance,
and Enhancement; D.2.9 [Software Engineering]: Man-
agement; H.3.4 [Information Storage and Retrieval]:
Systems and Software
</category>
<sectionHeader confidence="0.977521" genericHeader="general terms">
General Terms
</sectionHeader>
<keyword confidence="0.67514">
Human Factors, Management, Measurement
</keyword>
<sectionHeader confidence="0.987908" genericHeader="keywords">
Keywords
</sectionHeader>
<bodyText confidence="0.989745">
Software ecosystems, programmer needs, open source soft-
ware, program comprehension, frameworks and libraries
</bodyText>
<sectionHeader confidence="0.998411" genericHeader="introduction">
1. INTRODUCTION
</sectionHeader>
<bodyText confidence="0.9987171">
Open source software is based on transparency and reuse:
almost no useful open source software project consists of
an isolated island. Instead, every project depends on other
projects, frameworks, libraries, platforms, and often other
projects depend on it. The beauty of this situation is that
while functionally dependent, these projects can maintain
complete organizational independence. Drawing lessons from
the success of the open source model, large companies have
been organizing teams that maintain administrative auton-
omy while co-evolving software and services.
</bodyText>
<copyright confidence="0.98542025">
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
ECSAW August 25 - 29 2014, Vienna, Austria
Copyright 2014 ACM 978-1-4503-2778-7/14/08 ...$15.00.
</copyright>
<page confidence="0.511685">
http://dx.doi.org/10.1145/2642803.2642815
</page>
<bodyText confidence="0.999227153846154">
We use the term software ecosystem to refer to a collection
of software projects that must co-evolve in a context where
they functionally depend on each other while maintaining
organizational independence [1]. In an ecosystem, the func-
tional interdependence between projects poses special chal-
lenges to both the developers of the dependent project and
those of the project that is depended on. However, these
challenges have been studied far too little.
In our first qualitative study we investigated what infor-
mation developers need [2]. In an open-question survey we
asked framework and library developers about their needs
and current practices. We discovered that open source de-
velopers take two different perspectives in an ecosystem con-
text. They take the upstream perspective when interact-
ing with projects that rely on their source code, and they
take the downstream perspective when interacting about the
projects they rely on. Each perspective brings different chal-
lenges, and addressing these challenges requires specific but
divergent information needs.
Our preliminary findings show that downstream needs fall
into three categories roughly corresponding to the differ-
ent stages in their relation with an upstream: selection-,
adoption-, and co-evolution-related needs. Upstream needs
fall in two categories: project statistics and code usage.
The needs, the motivations behind them, and the cur-
rent practices that we proposed in our previous, qualitative
study, were based on our own analysis and synthesis of the
interview data, and thus, might be biased.
To validate the proposed needs, motivations, and practices
we conducted a quantitative follow-up study. 75 professional
developers rated statements based on our initial findings in
a closed-ended questionnaire.
In this paper we report the results of the quantitative sur-
vey. What we see is that most of the needs that we elicited in
the previous study are confirmed. We also see that the prac-
tices that we discovered previously have less support than
we expected, with mailing lists and searching the internet
being the main tools used by the developers. This indicates
opportunities for future research.
</bodyText>
<sectionHeader confidence="0.997399" genericHeader="method">
2. METHODOLOGY
</sectionHeader>
<bodyText confidence="0.997621">
We use a sequential exploratory design [3, Chapter 3] for
our research. It is a mixed research methods strategy that
consists of a qualitative investigation followed by a quanti-
tative validation survey.
In our qualitative study [2] we asked the interviewed de-
velopers what their information needs were corresponding to
their upstream and downstream roles in the software ecosys-
</bodyText>
<figure confidence="0.99419812962963">
UM-1: Strengthening
self-esteem
UM-2: Maintaining
downstream compatibility
Code Usage
Project
Statistics
DM-1: API
Understanding
DM-2: Keeping up with
upstream evolution
DM-3: Choosing the
right upstream
DM-4: Influencing the
upstream
Selection
Adoption
Co-evolution
API Usage Details (UN-2)
Runtime Statistics (UN-4)
Code Convention Compliance (UN-5)
Downstream Projects (UN-1)
Forked Projects (UN-3)
Public Support (DN-2)
License Type (DN-4)
Implementation Quality (DN-5)
Monitoring Upstream Changes (DN-1)
Documentation (DN-3)
Comparison w/ Similar Upstreams (DN-7)
Contextual Example Code (DN-7)
Compatibility with other systems (DN-6)
Upstream
Developer
DM-5: Estimating the
impact of changes
Downstream
Developer
UM-3: Managing
resources
Monitoring news (DP-1)
Continous intergration (DP-3)
Unit tests (DP-4)Pr
ac
tic
es
Searching the internet (DP-2)
Mailinglists (UP-1)
Repository analytics (UP-2)
Monitoring commits (UP-3)
Social media (UP-4)
Pr
ac
tic
es
</figure>
<figureCaption confidence="0.817689">
Figure 1: A visual summary of the motivations, information needs and practices identified in our previous,
qualitative study. The aspects which are strongly corroborated in the current, quantitative study are in bold.
</figureCaption>
<bodyText confidence="0.995133388888889">
tem in which they craft software. To analyze the answers
we received as free-form text, we applied a grounded theory
methodology as introduced by Strauss and Corbin [4]. In the
open coding process we identified emerging topics by label-
ing the text answers line-by-line with appropriate concepts.
To ensure quality this procedure was repeated independently
by the three mentioned first authors of the paper.
The results of the data analysis phase were lists of infor-
mation needs, developer motivations, and current practices.
Figure 1 synthesizes the main categories we discovered: the
motivations on the left, the information needs on the right,
and the current practices near the developer figures. Due to
lack of space, the figure superimposes information from the
current study. Specifically, those items which were strongly
corroborated by the current study are in bold, while the
others are italic and grayed out.
The qualitative results from our previous study served as
an initial position to formulate suitable propositions. With
our mixed-methods research strategy we corroborate the im-
portance of the reported information needs and test their
consistency by a quantitative investigation. To validate these
statements we conducted a quantitative closed-questioned
online survey1. This time, the participants were randomly
selected from mailing list subscriptions. They did not an-
swer with free text, but instead their answers ranged from
full disagreement to full agreement on a series of numerical
5-point Likert items.
A total of 51 Likert item questions were asked; 26 ques-
tions (Q1.1–Q3.5) to upstream developers and 25 questions
(Q4.1-Q6.7) to downstream developers. Furthermore, we ask-
ed several pre-survey questions about developer background
and three voluntary open-ended post-survey ones. Where ap-
plicable, we include quotations from the participants. These
quotations are labelled with codes of the form LS − NN
where NN is the number of the participant.
To reach a random sample, we advertised the survey in
</bodyText>
<footnote confidence="0.981136">
1The survey is available at http://goo.gl/q2ABRd
</footnote>
<bodyText confidence="0.876927285714286">
various mailing lists including: Open JDK, Processing.js,
jQuery, SciPy, NumPy, Pharo, Squeak, Seaside, Drupal, Core-
audio, Apache Hadoop, Apache Cassandra, Google WebToolkit,
Ubuntu, Soot and Zend Framework.
We received 75 responses, 46 from upstream developers,
and 29 from downstream developers. Even though no re-
sponse rate could be determined, we reached participants
across the world (46% from Europe, 32% North America,
8% from Asian, 6% from South America, 4% from Australia
and 1% from Africa).
The distribution of practical knowledge of the respondents
is shown in Table 1. Almost half of them have more than ten
years and less than a fifth stated to have less than five years
experience.
</bodyText>
<table confidence="0.9511675">
Professional Experiences Respondents [%]
&lt; 5 years 17
5 - 10 years 29
11 - 20 years 22
&gt; 20 years 22
no answers 10
</table>
<tableCaption confidence="0.99952">
Table 1: Distribution of respondents’ experience
</tableCaption>
<sectionHeader confidence="0.987267" genericHeader="method">
3. UPSTREAM DEVELOPER NEEDS
</sectionHeader>
<bodyText confidence="0.988442875">
We organize the needs in subsections. At the begining of
every subsection we provide a graphic which summarizes the
agreement our 75 respondents showed to the questions that
pertain to the needs in that section. The data behind the
charts is available online2. Where appropriate, in the text,
we highlight key findings in a box. A green checkmark and
a red one mark respectively a need that is corroborated by
the current study and one that is not.
</bodyText>
<footnote confidence="0.966249214285714">
2http://scg.unibe.ch/research/ecosystem-needs
3.1 Needs Related to Code Usage
These developer needs detail how people use source code3.
Q1.1. The usability of my API. (UN-2)
Q1.2. Which API methods are called. (UN-2)
Q1.3. How the library is being used to asses the impact on changes. (UN-2)
Q1.4. Unused methods and functionalities. (UN-2)
Q1.5. How often a method gets called. (UN-4)
Q1.6. API failure statistics. (UN-4)
Q1.7. What arguments a method is typically invoked with. (UN-4)
Q1.8. Highly often used methods are better maintained by me. (UN-2 / UM-3)
Q1.9. The order in which the API methods are called. (UN-2)
Q1.10. If users follow the coding conventions I set. (UN-5)
Strongly Disagree Disagree Neither Agree Strongly Agree
</footnote>
<construct confidence="0.649917">
I need to know ...
</construct>
<bodyText confidence="0.988649666666667">
The information need with the highest confirmation rate
was “API usage details” (UN-2)4. The most agreed upon
statement for developers was that they want to know the
usability of their API. The next was more detailed: what
methods are called by users followed by what methods are
not used.
</bodyText>
<sectionHeader confidence="0.931208" genericHeader="method">
3 API usage details (UN-2)
</sectionHeader>
<bodyText confidence="0.993238928571429">
(Q1.1 – Q1.3) More than 90% either agree or strongly
agree that the usability of an API is an important aspect.
Just as many people agree as strongly agree in being inter-
ested in what API methods are called and how their library
is used. To assess the impact of changes, 77.7% of partici-
pants want to know how others use their library. A respon-
dent reasons that this is “not just about minimizing the im-
pact of changes, but also about seeing what’s awkward, what
features are used in conjunction and which independently,
which areas are performance sensitive etc” (LS-57).
(Q1.9) The importance of “Runtime statistics” (UN-4) is
less supported by developer feedback. Although originally
it seemed like a legitimate need, 69.9% do not care how
downstream developers apply the order of method calls.
</bodyText>
<sectionHeader confidence="0.618287" genericHeader="method">
3 Runtime statistics (UN-4)
</sectionHeader>
<bodyText confidence="0.504022666666667">
Our findings corroborate the importance of this need.
(Q1.6) 61% agreed or strongly agreed that they want to
know API failure statistics.
(Q1.5 and Q1.7) 63.0% agreed or strongly agreed to
needing to know the number of method calls ; 53% want to
know what parameters a method needs.
</bodyText>
<sectionHeader confidence="0.304692" genericHeader="method">
7 Code convention compliance (UN-5)
</sectionHeader>
<bodyText confidence="0.936193888888889">
The least agreed upon need is code convention compliance.
(Q1.10) Only a slight majority of developers care if their
coding conventions are respected by the downstream. A re-
maining two thirds strongly or simply disagree.
As these results are inconclusive we consider this need as
not being corroborated by the current study.
Upstream developers share a strong agreement of needing
to know how other use their API since they want to im-
prove their own code.
</bodyText>
<footnote confidence="0.990995333333333">
3The numbering of the needs is in sync with the numbering
in our previous qualitative analysis report
4We asked more questions about API usage since our initial
</footnote>
<bodyText confidence="0.695905">
quantitative survey indicated that this need arise five times
more than other needs
</bodyText>
<subsectionHeader confidence="0.777459">
3.2 Needs Related to Project Statistics
</subsectionHeader>
<bodyText confidence="0.922979">
The responses to our questions on project statistics-related
information needs can be seen bellow.
</bodyText>
<footnote confidence="0.886526571428572">
Q1.11. Know what people build with my framework. (UN-1)
Q1.12. Know whether people migrate to the latest version of my library. (UN-1)
Q1.13. Know who tracks my project. (UN-1)
Q1.14. Know the number of downloads. (UN-1)
Q1.15. Know all my downstream projects. (UN-1)
Q1.16. Know if many people like my code. (UN-3)
Strongly Disagree Disagree Neither Agree Strongly Agree
</footnote>
<construct confidence="0.448136">
I want to ...
</construct>
<bodyText confidence="0.970816">
The information need “Downstream projects” (UN-1) re-
ceived strongly positive feedback. The most-agreed-upon state-
ment was that developers need to know what clients build
with their code.
</bodyText>
<sectionHeader confidence="0.579893" genericHeader="method">
3 Downstream projects (UN-1)
</sectionHeader>
<bodyText confidence="0.994726666666667">
We asked developers about information needs with respect
to their clients.
(Q1.11 – Q1.14) Two thirds of the participants want to
know who is tracking their current project (69.5%, Q1.13)
and are interested in the number of downloads (65.2%, Q1.14).
Almost 90% agree or strongly agree that they want to know
what people built with their provided framework or library
(Q1.11). Two-thirds are interested in knowing whether the
downstream is migrating to the latest version (Q1.12).
(Q1.15) Two thirds are undecided, disagree or strongly
disagree that they need to know all their downstream projects.
This statement has the most undecided votes in this cate-
gory. This is important information for future tool builders
since tracking the complete downstream would be clearly
impossible.
</bodyText>
<sectionHeader confidence="0.554663" genericHeader="method">
3 Forked projects (UN-3)
</sectionHeader>
<bodyText confidence="0.998344636363636">
This category is about cloned source code bases. This need
is strongly supported.
(Q1.16) 73.9% are interested whether people like their
code. When people can not influence the upstream code,
they might clone the code base for their own purposes. A
majority of the upstream developers confirm that they do
not track any forks as the statement Q3.5 indicates.
Upstream developers want to know more than just the
number or downloads, followers etc.. A comparison across
the statements indicates the need of knowing details about
how downstream uses their code.
</bodyText>
<subsectionHeader confidence="0.999756">
3.3 Discussion of Upstream Findings
</subsectionHeader>
<bodyText confidence="0.999532307692307">
Our results show that upstream developers are interested
in “API usage details”. Researchers are already investigating
the automatic analysis of distributed and large-scale reposi-
tories: API deprecation in the Smalltalk ecosystem [5], li-
brary usage in the Apache ecosystem [6], API evolution
in the Android ecosystem [7], code clone detection across
projects [8] and ecosystem visualization [9]. However, none of
the previous approaches fully addresses the upstream needs
reported in this section.
The statement Q1.15 has little support. This is surprising
and contradictory to Q1.11. We assume that upstream de-
velopers are not interested in the individual project but in
the overall usage.
</bodyText>
<sectionHeader confidence="0.996036" genericHeader="method">
4. DOWNSTREAM DEVELOPER NEEDS
</sectionHeader>
<bodyText confidence="0.997095">
This section discusses the downstream information needs.
</bodyText>
<subsectionHeader confidence="0.985431">
4.1 Needs Related to Selection
</subsectionHeader>
<bodyText confidence="0.8935365">
An overview of the responses to our questions on selection-
related information needs can be seen bellow.
</bodyText>
<footnote confidence="0.98103975">
Q4.1. Whether the project&apos;s code works. (DN-5)
Q4.2. How intensively the project is maintained. (DN-2)
Q4.3. Pros and cons of related frameworks/libraries. (DN-8)
Q4.4. How responsive the support team is. (DN-2)
Q4.5. The software license. (DN-4)
Q4.6. The popularity of the project. (DN-2)
Q4.7. Who the upstream developers are. (DN-2)
Q4.8. Whether it takes more than an hour to get started. (DN-5)
</footnote>
<figure confidence="0.4503285">
StronglyDisagree Disagree Neither Agree Strongly Agree
I need to know ...
</figure>
<figureCaption confidence="0.865387">
Figure 2: Selection.
</figureCaption>
<figure confidence="0.6055195">
3 Implementation quality (DN-5)
(Q4.1) The statement Q4.1 is the strongest statement of
</figure>
<bodyText confidence="0.526085">
this survey. 75.7% strongly agree and 24.3% agree on the
</bodyText>
<listItem confidence="0.860937166666667">
need to know whether the project’s code works.
(Q4.8) A third of the developers confirm they will dismiss
an unfamiliar framework and library if they are unable to
make it work within an hour. Two-thirds would spend more
than one hour before giving up.
3 Available public support (DN-2)
</listItem>
<bodyText confidence="0.931790285714286">
The finding indicates some degree of inconclusiveness. Re-
sults range from strong to low support.
(Q4.2) The second strongest statement is about the in-
tensity of maintenance. 91.4% strongly agree or just agree
with this need. A participant confirms: “As a developer (and
user in certain cases), I want to be certain that the commu-
nity is friendly, accepts [newbies] and responds fast”(LS-48).
(Q4.7) Two-thirds are not interested in who the develop-
ers are. This finding is supported by the motivational state-
ment Q5.4 about trust. In addition, it has a large proportion
of undecided answers (45.0%).
When choosing an upstream, developers are less interested
in the identity of the developers and more in alternative
projects, code quality and the maintenance level.
</bodyText>
<figure confidence="0.479562625">
3 Comparsion with similar upstreams (DN-8)
This information need is strongly supported.
(Q4.3) 84% strongly agree or agree to needing to compare
related projects with similar functionalities.
3 Licence type (DN-4)
This information need is strongly supported.
(Q4.5) The selection of a software project depends for
69.6% on its license type.
</figure>
<subsectionHeader confidence="0.935566">
4.2 Needs Related to Adoption
</subsectionHeader>
<bodyText confidence="0.868823666666667">
Adoption is the process of migrating to a new upstream.
In this context, the information needs “Documentation”
(DN-3) and“Real contextual sample code”(DN-7) are strongly
supported. None of the respondents disagreed with either of
the two statements regarding code examples and API doc-
umentation.
</bodyText>
<listItem confidence="0.717286">
Q4.9. Code examples help to learn a project&apos;s design. (DN-7)
Q4.10. Up-to-date API and design documentation. (DN-3)
Strongly Disagree Disagree Neither Agree Strongly Agree
3 Documentation (DN-3)
(Q4.10) There is a 90% agreement (and strong agreement)
that a good API, design documentation and code examples
</listItem>
<bodyText confidence="0.911493">
are essential. One respondent emphasizes: “[...] this depends
on the documentation and ease of use: some frameworks are
so easy to use you barely need to read a quick-start docu-
ment, others are very difficult to learn — sometimes this is
because of an over-complicated API, other times its because
the concepts are complicated” (LS-42).
</bodyText>
<sectionHeader confidence="0.786708" genericHeader="method">
3 Real contextual sample code (DN-7)
</sectionHeader>
<bodyText confidence="0.972995">
(Q4.9) 85% would appreciate extracted code examples illus-
trating the functionalites provided by their upstream project.
Developers recognize that real code examples from other
projects help to understand upstream functionality
</bodyText>
<subsectionHeader confidence="0.948916">
4.3 Needs Related to Co-evolution
</subsectionHeader>
<bodyText confidence="0.913784857142857">
Q4.11. Details about which methods and classes have changed. (DN-1)
Q4.12. I want to know the impact before I update to the latest version. (DN-1 / DN-6 / DM-5)
Q4.13. I only want to get notified on code changes when my code is affected. (DN-1 / DM-2)
StronglyDisagree Disagree Neither Agree Strongly Agree
Developers are interested in details about which methods
and classes have changed and whether these changes have
an impact on their own source code.
</bodyText>
<sectionHeader confidence="0.769874" genericHeader="method">
3 Monitoring upstream changes (DN-1)
</sectionHeader>
<bodyText confidence="0.988111769230769">
Evolving a downstream project requires detailed information
about source code changes. These include both general bug
fixes and release changes.
(Q4.11 and Q4.12) Both reveal a strong agreement on
an instant information mechanism.
(Q4.13) There is one Likert item that stands out because
of the prevalence of undecided answers. This indicates either
a badly-phrased statement or participant lack of experience
with notification systems.
Downstream developers want to know the impact before
updating to the latest version. This includes monitoring the
upstream evolution and preview information of changes in
implementation details.
</bodyText>
<subsectionHeader confidence="0.999847">
4.4 Discussion of Downstream Findings
</subsectionHeader>
<bodyText confidence="0.9989384">
The results show that upstream identity is not relevant to
developers. This is the opposite of what developers working
in a closed-source context report [10].
In an empirical study on library updates with a collec-
tion of Java open-source programs, Dietrich et al. show that
current practices do not reveal potential impacts when us-
ing a newer API version [11]. A solution to this problem
and similar ones that can be automatically applied to large-
scale software ecosystem development is needed and has the
promise of adoption by developers.
</bodyText>
<sectionHeader confidence="0.996578" genericHeader="method">
5. DEVELOPER MOTIVATIONS
</sectionHeader>
<subsectionHeader confidence="0.880827">
5.1 Upstream Motivations
</subsectionHeader>
<bodyText confidence="0.995794333333333">
For the upstream, the motivation“Strengthening self-esteem”
is slightly less supported than“Maintaining downstream com-
patibility”, though both are strongly supported.
</bodyText>
<footnote confidence="0.737417">
Q2.1. I want to provide help to clients. (UM-2)
Q2.2. I want to notify clients of changes ot maintain compatibility. (UM-2)
Q2.3. I follow my own vision of the project. (UM-2 / UM-1)
Q2.4. It keeps me motivated if a lot of people like my code. (UM-1)
Q2.5. It helps the self-esteem if a lot of people like my code. (UM-1)
</footnote>
<table confidence="0.8087795">
StronglyDisagree Disagree Neither Agree Strongly Agree
I (don&apos;t) need to know these things because ...
Strengthening self-esteem (UM-1)
(Q2.4 and Q2.5) Over 70% strongly agree or agree that
positive feedback helps them stay motivated. On the other
hand, self-esteem was not considered important.
Maintaining downstream compatibility (UM-2)
(Q2.1 and Q2.2) There is a strong need to provide help to
</table>
<bodyText confidence="0.997072833333334">
downstream developers, to notify about code changes and
to minimize impacts. A respondent states “if people are
making downstream fixes it would be helpful to know this so
that [these changes]can be merged” (LS-42).
Upstream developers are usually good citizens interested
in providing support to downstream.
</bodyText>
<subsectionHeader confidence="0.99707">
5.2 Downstream Motivations
</subsectionHeader>
<bodyText confidence="0.990288666666667">
Our identified motivations “Choosing the right upstream”
(DM-3),“API understanding”(DM-1),“Keeping up with up-
stream evolution” (DM-2) are all inconclusive.
Motivation “Estimating the impact of changes” is sup-
ported. Developers agree that they avoid code migration if
the estimated time is excessive.
</bodyText>
<footnote confidence="0.8156294">
Q5.1. I avoid code adaptation if the estimated time is excessive. (DM-5)
Q5.2. It is painful to track dependencies among packages. (DM-1)
Q5.3. I stay with the running version as long as possible. (DM-5)
Q5.4. I am curious if code changes are made by someone I trust. (DM-2)
Q5.5. I only use a widely used version of a library. (DM-3)
</footnote>
<table confidence="0.4452715">
Strongly Disagree Disagree Neither Agree Strongly Agree
API understanding (DM-1)
</table>
<listItem confidence="0.279889">
(Q5.2) Difficulties occur to keep an overall overview among
code dependencies.
Keeping up with upstream evolution (DM-2)
(Q5.4) A majority of over 70% does not care if code changes
</listItem>
<bodyText confidence="0.99653524">
are done by developers they trust. Implementation quality
is more important than the reputation of the developers.
Choosing the right upstream (DM-3)
(Q5.5) More than half of the respondents have confirmed
that the more often a library or framework is already in use
the more likely developers will use it, too. This indicates
that developers think that frequency of usage may provide
information about quality, available support and popularity.
Downstream developers tend to rely on the wisdom of the
crowds. They trust more popular libraries.
Estimating the impact of changes (DM-5)
Downstream developers are willing to upgrade to the newest
version if adopting the new upstream version is feasible in a
reasonable time.
(Q5.1) 85% agreed or strongly agreed that the decision
of whether to adapt code or not depends on the estimated
time. (Estimating the impact of changes)
(Q5.3) One out of four developers would stay with a run-
ning version as long as possible. This shows that there is
the willingness to keep up with the latest version and at the
same time that developers find upgrading a burden.
The decision whether to adapt code or not depends on
the estimated time. It is likely that the more complex a
software project gets, the more likely it is that developers
will omit if possible adaptations such as version updates.
</bodyText>
<sectionHeader confidence="0.999297" genericHeader="method">
6. DEVELOPER PRACTICES
</sectionHeader>
<bodyText confidence="0.956516444444445">
The statement that got the strongest support from the
upstream was that developers follow mailing lists in order to
learn about the way their code is used. The other statements
received generally negative feedback, indicating either that
we overlooked existing tools and practice, or that such tools
do not exist.
StronglyDisagree Disagree Neither Agree Strongly Agree
Q3.1. I follow Mailing lists. (UP-1)
Q3.2. I follow Social media. (UP-4)
Q3.3. I use Web analytics (e.g. Google Analytics). (UP-2)
Q3.4. I use RSS Feed Notifications. (UP-3)
Q3.5. I track the clones of my framework. (UP-2)
To obtain information about my downstream users, ...
For the upstream, three practices got strong support:“Mon-
itoring news”(DP-1) — developers subscribe to mailing lists;
“Searching the Internet”(DP-2) — developers routinely search
for blog posts and tutorials; and “Continuous integration”
(DP-3) — developers routinely run integration tests.
</bodyText>
<footnote confidence="0.74868925">
Q6.1. Searching for blog posts and tutorials. (DP-2)
Q6.2. Building regularly to ensure things still work. (DP-3)
Q6.3. Subscribing to mailing lists to keep up-to-date. (DP-1)
Q6.4. Monitoring commits and activities of a project repository . (DP-1)
Q6.5. Tracking bug reports. (DP-2)
Q6.6. Using unit tests to understand how to use an upstream project. (DP-4)
Q6.7. I update as soon as changes are released on upstream projects. (DP-3)
Strongly Disagree Disagree Neither Agree Strongly Agree
</footnote>
<bodyText confidence="0.506185">
“Unit tests” (DP-4) as a practice is inconclusive.
</bodyText>
<sectionHeader confidence="0.871286" genericHeader="method">
7. THREATS TO VALIDITY
</sectionHeader>
<bodyText confidence="0.999276636363636">
Our questionnaire does not use balanced keying, and there-
fore is subject to acquiescence bias.
The results of our study depend on the selected partic-
ipants. Our test population was convenience sampled, the
generalizability of our study is limited.
The quantitative approach derives questions that are re-
lated to the quantitative approach but there are times when
there is only one question per one need. We settled for this
approach since we wanted to avoid overloading our respon-
dents with too many questions. This however, limits the gen-
erality of our results with respect to the needs.
</bodyText>
<sectionHeader confidence="0.952239" genericHeader="related work">
8. RELATED WORK
</sectionHeader>
<bodyText confidence="0.999896944444445">
Ko et al. [12] conducted a study in finding information
needs in development teams. Their findings include 21 dif-
ferent types of information in seven categories. The majority
refer to knowledge of software artifacts or co-workers.
Seichter et al. [13] examine an information retrieval man-
agement system for software artifacts to improve collabora-
tion. They define types of interactions but do not declare
specific information needs.
Begel et al. [10] asked programmers inside Microsoft com-
pany about inter-team collaboration problems. They identi-
fied and grouped 31 information needs into eight categories.
Phillips et al. [14] identify information needs to integrate
branched version of a software project. They found four
needs: Identifying conflicts before they arise, monitoring fea-
tures with their dependencies, tracking measured data about
number of bugs, test results etc.
Jansen reports that the choices that developers make are
not always technical, but they are also business related [15].
</bodyText>
<sectionHeader confidence="0.997704" genericHeader="conclusions">
9. CONCLUSION
</sectionHeader>
<bodyText confidence="0.992923333333333">
Our findings after interviewing a number of 75 developers
corroborate almost all the needs discovered in our previous,
qualitative study. We conclunde that there is a lack of ade-
quate tool support for developers working in an ecosystem
context. We believe that at the intersection of strong infor-
mation needs, inappropriate practices, and a new research
field, lays great potential for future impactful research.
Acknowledgments. We thank Andrei Chis for valuable
feedback on this paper. We gratefully acknowledge the fi-
nancial support of the Swiss National Science Foundation
for the project “Agile Software Assessment” (SNSF project
No. 200020-144126/1, Jan 1, 2013 - Dec. 30, 2015).
</bodyText>
<sectionHeader confidence="0.652743" genericHeader="references">
10. REFERENCES
</sectionHeader>
<reference confidence="0.999502907894737">
[1] Mircea Lungu. Reverse Engineering Software
Ecosystems. PhD thesis, University of Lugano,
November 2009.
[2] Nicole Haenni, Mircea Lungu, Niko Schwarz, and
Oscar Nierstrasz. Categorizing developer information
needs in software ecosystems. In Proceedings of the 1st
Workshop on Ecosystem Architectures, pages 1–5,
2013.
[3] John W Creswell and Vicki L Plano Clark. Designing
and conducting mixed methods research. Wiley Online
Library, 2007.
[4] Anselm Strauss and Juliet Corbin. Basics of
Qualitative Research: Techniques and Procedures for
Developing Grounded Theory. SAGE Publications
Inc., 1998.
[5] Romain Robbes, Mircea Lungu, and David
Röthlisberger. How do developers react to api
deprecation?: the case of a smalltalk ecosystem. In
Proceedings of the ACM SIGSOFT 20th International
Symposium on the Foundations of Software
Engineering, page 56. ACM, 2012.
[6] Yana Momchilova Mileva, Valentin Dallmeier, Martin
Burger, and Andreas Zeller. Mining trends of library
usage. In Proceedings of the joint international and
annual ERCIM workshops on Principles of software
evolution (IWPSE) and software evolution (Evol)
workshops, IWPSE-Evol ’09, pages 57–62, New York,
NY, USA, 2009. ACM.
[7] Tyler McDonnell, Baishakhi Ray, and Miryung Kim.
An empirical study of api stability and adoption in the
android ecosystem. In Software Maintenance (ICSM),
2013 29th IEEE International Conference on, pages
70–79. IEEE, 2013.
[8] Niko Schwarz, Mircea Lungu, and Romain Robbes. On
how often code is cloned across repositories. In
Proceedings of the 2012 International Conference on
Software Engineering, ICSE 2012, pages 1289–1292,
Piscataway, NJ, USA, 2012. IEEE Press.
[9] Mircea Lungu, Michele Lanza, Tudor Gı̂rba, and
Romain Robbes. The Small Project Observatory:
Visualizing software ecosystems. Science of Computer
Programming, Elsevier, 75(4):264–275, April 2010.
[10] Andrew Begel, Yit Phang Khoo, and Thomas
Zimmermann. Codebook: discovering and exploiting
relationships in software repositories. In Proceedings of
the 32nd ACM/IEEE International Conference on
Software Engineering - Volume 1, ICSE ’10, pages
125–134, New York, NY, USA, 2010. ACM.
[11] Jens Dietrich, Kamil Jezek, and Premek Brada.
Broken promises: An empirical study into evolution
problems in java programs caused by library upgrades.
In Software Maintenance, Reengineering and Reverse
Engineering (CSMR-WCRE), 2014 Software Evolution
Week-IEEE Conference on, pages 64–73. IEEE, 2014.
[12] Andrew J. Ko, Robert DeLine, and Gina Venolia.
Information needs in collocated software development
teams. In Proceedings of the 29th international
conference on Software Engineering, ICSE ’07, pages
344–353, Washington, DC, USA, 2007. IEEE
Computer Society.
[13] Dominik Seichter, Deepak Dhungana, Andreas Pleuss,
and Benedikt Hauptmann. Knowledge management in
software ecosystems: software artefacts as first-class
citizens. In Proceedings of the Fourth European
Conference on Software Architecture: Companion
Volume, pages 119–126. ACM, 2010.
[14] Shaun Phillips, Guenther Ruhe, and Jonathan Sillito.
Information needs for integration decisions in the
release process of large-scale parallel development. In
Proceedings of the ACM 2012 conference on Computer
Supported Cooperative Work, pages 1371–1380. ACM,
2012.
[15] Slinger Jansen. How quality attributes of platform
architectures influence software ecosystems. In
Proceedings of the 1st Workshop on Ecosystem
Architectures, 2013.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.080288">
<title confidence="0.99958">A Quantitative Analysis of Developer Information Needs in Software Ecosystems</title>
<author confidence="0.99867">Nicole Haenni</author>
<author confidence="0.99867">Mircea Lungu</author>
<author confidence="0.99867">Niko Schwarz</author>
<author confidence="0.99867">Oscar Nierstrasz</author>
<affiliation confidence="0.999972">University of Bern</affiliation>
<address confidence="0.49743">Switzerland</address>
<web confidence="0.984309">http://scg.unibe.ch</web>
<abstract confidence="0.998873583333333">We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs.</abstract>
<note confidence="0.85756">Categories and Subject Descriptors D.2.7 [Software Engineering]: Distribution, Maintenance, and Enhancement; D.2.9 [Software Engineering]: Management; H.3.4 [Information Storage and Retrieval]:</note>
<title confidence="0.832857333333333">Systems and Software General Terms Human Factors, Management, Measurement</title>
<keyword confidence="0.876717">Keywords Software ecosystems, programmer needs, open source soft-</keyword>
<intro confidence="0.547342">ware, program comprehension, frameworks and libraries</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Mircea Lungu</author>
</authors>
<title>Reverse Engineering Software Ecosystems.</title>
<date>2009</date>
<tech>PhD thesis,</tech>
<institution>University of Lugano,</institution>
<contexts>
<context position="2528" citStr="[1]" startWordPosition="362" endWordPosition="362">e or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. ECSAW August 25 - 29 2014, Vienna, Austria Copyright 2014 ACM 978-1-4503-2778-7/14/08 ...$15.00. http://dx.doi.org/10.1145/2642803.2642815 We use the term software ecosystem to refer to a collection of software projects that must co-evolve in a context where they functionally depend on each other while maintaining organizational independence [1]. In an ecosystem, the functional interdependence between projects poses special challenges to both the developers of the dependent project and those of the project that is depended on. However, these challenges have been studied far too little. In our first qualitative study we investigated what information developers need [2]. In an open-question survey we asked framework and library developers about their needs and current practices. We discovered that open source developers take two different perspectives in an ecosystem context. They take the upstream perspective when interacting with pro</context>
</contexts>
<marker>[1]</marker>
<rawString>Mircea Lungu. Reverse Engineering Software Ecosystems. PhD thesis, University of Lugano, November 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nicole Haenni</author>
<author>Mircea Lungu</author>
<author>Niko Schwarz</author>
<author>Oscar Nierstrasz</author>
</authors>
<title>Categorizing developer information needs in software ecosystems.</title>
<date>2013</date>
<booktitle>In Proceedings of the 1st Workshop on Ecosystem Architectures,</booktitle>
<pages>1--5</pages>
<contexts>
<context position="2857" citStr="[2]" startWordPosition="414" endWordPosition="414">2778-7/14/08 ...$15.00. http://dx.doi.org/10.1145/2642803.2642815 We use the term software ecosystem to refer to a collection of software projects that must co-evolve in a context where they functionally depend on each other while maintaining organizational independence [1]. In an ecosystem, the functional interdependence between projects poses special challenges to both the developers of the dependent project and those of the project that is depended on. However, these challenges have been studied far too little. In our first qualitative study we investigated what information developers need [2]. In an open-question survey we asked framework and library developers about their needs and current practices. We discovered that open source developers take two different perspectives in an ecosystem context. They take the upstream perspective when interacting with projects that rely on their source code, and they take the downstream perspective when interacting about the projects they rely on. Each perspective brings different challenges, and addressing these challenges requires specific but divergent information needs. Our preliminary findings show that downstream needs fall into three cat</context>
<context position="4741" citStr="[2]" startWordPosition="703" endWordPosition="703">f the quantitative survey. What we see is that most of the needs that we elicited in the previous study are confirmed. We also see that the practices that we discovered previously have less support than we expected, with mailing lists and searching the internet being the main tools used by the developers. This indicates opportunities for future research. 2. METHODOLOGY We use a sequential exploratory design [3, Chapter 3] for our research. It is a mixed research methods strategy that consists of a qualitative investigation followed by a quantitative validation survey. In our qualitative study [2] we asked the interviewed developers what their information needs were corresponding to their upstream and downstream roles in the software ecosysUM-1: Strengthening self-esteem UM-2: Maintaining downstream compatibility Code Usage Project Statistics DM-1: API Understanding DM-2: Keeping up with upstream evolution DM-3: Choosing the right upstream DM-4: Influencing the upstream Selection Adoption Co-evolution API Usage Details (UN-2) Runtime Statistics (UN-4) Code Convention Compliance (UN-5) Downstream Projects (UN-1) Forked Projects (UN-3) Public Support (DN-2) License Type (DN-4) Implementa</context>
</contexts>
<marker>[2]</marker>
<rawString>Nicole Haenni, Mircea Lungu, Niko Schwarz, and Oscar Nierstrasz. Categorizing developer information needs in software ecosystems. In Proceedings of the 1st Workshop on Ecosystem Architectures, pages 1–5, 2013.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John W Creswell</author>
<author>Vicki L Plano Clark</author>
</authors>
<title>Designing and conducting mixed methods research.</title>
<date>2007</date>
<publisher>Wiley Online Library,</publisher>
<marker>[3]</marker>
<rawString>John W Creswell and Vicki L Plano Clark. Designing and conducting mixed methods research. Wiley Online Library, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anselm Strauss</author>
<author>Juliet Corbin</author>
</authors>
<title>Basics of Qualitative Research: Techniques and Procedures for Developing Grounded Theory.</title>
<date>1998</date>
<publisher>SAGE Publications Inc.,</publisher>
<contexts>
<context position="6237" citStr="[4]" startWordPosition="907" endWordPosition="907">itoring news (DP-1) Continous intergration (DP-3) Unit tests (DP-4)Pr ac tic es Searching the internet (DP-2) Mailinglists (UP-1) Repository analytics (UP-2) Monitoring commits (UP-3) Social media (UP-4) Pr ac tic es Figure 1: A visual summary of the motivations, information needs and practices identified in our previous, qualitative study. The aspects which are strongly corroborated in the current, quantitative study are in bold. tem in which they craft software. To analyze the answers we received as free-form text, we applied a grounded theory methodology as introduced by Strauss and Corbin [4]. In the open coding process we identified emerging topics by labeling the text answers line-by-line with appropriate concepts. To ensure quality this procedure was repeated independently by the three mentioned first authors of the paper. The results of the data analysis phase were lists of information needs, developer motivations, and current practices. Figure 1 synthesizes the main categories we discovered: the motivations on the left, the information needs on the right, and the current practices near the developer figures. Due to lack of space, the figure superimposes information from the c</context>
</contexts>
<marker>[4]</marker>
<rawString>Anselm Strauss and Juliet Corbin. Basics of Qualitative Research: Techniques and Procedures for Developing Grounded Theory. SAGE Publications Inc., 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Romain Robbes</author>
<author>Mircea Lungu</author>
<author>David Rothlisberger</author>
</authors>
<title>How do developers react to api deprecation?: the case of a smalltalk ecosystem.</title>
<date>2012</date>
<booktitle>In Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering,</booktitle>
<pages>56</pages>
<publisher>ACM,</publisher>
<contexts>
<context position="14783" citStr="[5]" startWordPosition="2267" endWordPosition="2267">r their own purposes. A majority of the upstream developers confirm that they do not track any forks as the statement Q3.5 indicates. Upstream developers want to know more than just the number or downloads, followers etc.. A comparison across the statements indicates the need of knowing details about how downstream uses their code. 3.3 Discussion of Upstream Findings Our results show that upstream developers are interested in “API usage details”. Researchers are already investigating the automatic analysis of distributed and large-scale repositories: API deprecation in the Smalltalk ecosystem [5], library usage in the Apache ecosystem [6], API evolution in the Android ecosystem [7], code clone detection across projects [8] and ecosystem visualization [9]. However, none of the previous approaches fully addresses the upstream needs reported in this section. The statement Q1.15 has little support. This is surprising and contradictory to Q1.11. We assume that upstream developers are not interested in the individual project but in the overall usage. 4. DOWNSTREAM DEVELOPER NEEDS This section discusses the downstream information needs. 4.1 Needs Related to Selection An overview of the respo</context>
</contexts>
<marker>[5]</marker>
<rawString>Romain Robbes, Mircea Lungu, and David Röthlisberger. How do developers react to api deprecation?: the case of a smalltalk ecosystem. In Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, page 56. ACM, 2012.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yana Momchilova Mileva</author>
<author>Valentin Dallmeier</author>
<author>Martin Burger</author>
<author>Andreas Zeller</author>
</authors>
<title>Mining trends of library usage.</title>
<date>2009</date>
<booktitle>In Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops, IWPSE-Evol ’09,</booktitle>
<pages>57--62</pages>
<publisher>ACM.</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="14826" citStr="[6]" startWordPosition="2275" endWordPosition="2275">tream developers confirm that they do not track any forks as the statement Q3.5 indicates. Upstream developers want to know more than just the number or downloads, followers etc.. A comparison across the statements indicates the need of knowing details about how downstream uses their code. 3.3 Discussion of Upstream Findings Our results show that upstream developers are interested in “API usage details”. Researchers are already investigating the automatic analysis of distributed and large-scale repositories: API deprecation in the Smalltalk ecosystem [5], library usage in the Apache ecosystem [6], API evolution in the Android ecosystem [7], code clone detection across projects [8] and ecosystem visualization [9]. However, none of the previous approaches fully addresses the upstream needs reported in this section. The statement Q1.15 has little support. This is surprising and contradictory to Q1.11. We assume that upstream developers are not interested in the individual project but in the overall usage. 4. DOWNSTREAM DEVELOPER NEEDS This section discusses the downstream information needs. 4.1 Needs Related to Selection An overview of the responses to our questions on selectionrelated i</context>
</contexts>
<marker>[6]</marker>
<rawString>Yana Momchilova Mileva, Valentin Dallmeier, Martin Burger, and Andreas Zeller. Mining trends of library usage. In Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops, IWPSE-Evol ’09, pages 57–62, New York, NY, USA, 2009. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tyler McDonnell</author>
<author>Baishakhi Ray</author>
<author>Miryung Kim</author>
</authors>
<title>An empirical study of api stability and adoption in the android ecosystem.</title>
<date>2013</date>
<booktitle>In Software Maintenance (ICSM), 2013 29th IEEE International Conference on,</booktitle>
<pages>70--79</pages>
<publisher>IEEE,</publisher>
<contexts>
<context position="14870" citStr="[7]" startWordPosition="2282" endWordPosition="2282">ack any forks as the statement Q3.5 indicates. Upstream developers want to know more than just the number or downloads, followers etc.. A comparison across the statements indicates the need of knowing details about how downstream uses their code. 3.3 Discussion of Upstream Findings Our results show that upstream developers are interested in “API usage details”. Researchers are already investigating the automatic analysis of distributed and large-scale repositories: API deprecation in the Smalltalk ecosystem [5], library usage in the Apache ecosystem [6], API evolution in the Android ecosystem [7], code clone detection across projects [8] and ecosystem visualization [9]. However, none of the previous approaches fully addresses the upstream needs reported in this section. The statement Q1.15 has little support. This is surprising and contradictory to Q1.11. We assume that upstream developers are not interested in the individual project but in the overall usage. 4. DOWNSTREAM DEVELOPER NEEDS This section discusses the downstream information needs. 4.1 Needs Related to Selection An overview of the responses to our questions on selectionrelated information needs can be seen bellow. Q4.1. W</context>
</contexts>
<marker>[7]</marker>
<rawString>Tyler McDonnell, Baishakhi Ray, and Miryung Kim. An empirical study of api stability and adoption in the android ecosystem. In Software Maintenance (ICSM), 2013 29th IEEE International Conference on, pages 70–79. IEEE, 2013.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Niko Schwarz</author>
<author>Mircea Lungu</author>
<author>Romain Robbes</author>
</authors>
<title>On how often code is cloned across repositories.</title>
<date>2012</date>
<booktitle>In Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012,</booktitle>
<pages>1289--1292</pages>
<publisher>IEEE Press.</publisher>
<location>Piscataway, NJ, USA,</location>
<contexts>
<context position="14912" citStr="[8]" startWordPosition="2288" endWordPosition="2288">tes. Upstream developers want to know more than just the number or downloads, followers etc.. A comparison across the statements indicates the need of knowing details about how downstream uses their code. 3.3 Discussion of Upstream Findings Our results show that upstream developers are interested in “API usage details”. Researchers are already investigating the automatic analysis of distributed and large-scale repositories: API deprecation in the Smalltalk ecosystem [5], library usage in the Apache ecosystem [6], API evolution in the Android ecosystem [7], code clone detection across projects [8] and ecosystem visualization [9]. However, none of the previous approaches fully addresses the upstream needs reported in this section. The statement Q1.15 has little support. This is surprising and contradictory to Q1.11. We assume that upstream developers are not interested in the individual project but in the overall usage. 4. DOWNSTREAM DEVELOPER NEEDS This section discusses the downstream information needs. 4.1 Needs Related to Selection An overview of the responses to our questions on selectionrelated information needs can be seen bellow. Q4.1. Whether the project&apos;s code works. (DN-5) Q4</context>
</contexts>
<marker>[8]</marker>
<rawString>Niko Schwarz, Mircea Lungu, and Romain Robbes. On how often code is cloned across repositories. In Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012, pages 1289–1292, Piscataway, NJ, USA, 2012. IEEE Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mircea Lungu</author>
<author>Michele Lanza</author>
<author>Tudor Gırba</author>
<author>Romain Robbes</author>
</authors>
<title>The Small Project Observatory: Visualizing software ecosystems.</title>
<date>2010</date>
<journal>Science of Computer Programming, Elsevier,</journal>
<volume>75</volume>
<issue>4</issue>
<contexts>
<context position="14944" citStr="[9]" startWordPosition="2292" endWordPosition="2292"> know more than just the number or downloads, followers etc.. A comparison across the statements indicates the need of knowing details about how downstream uses their code. 3.3 Discussion of Upstream Findings Our results show that upstream developers are interested in “API usage details”. Researchers are already investigating the automatic analysis of distributed and large-scale repositories: API deprecation in the Smalltalk ecosystem [5], library usage in the Apache ecosystem [6], API evolution in the Android ecosystem [7], code clone detection across projects [8] and ecosystem visualization [9]. However, none of the previous approaches fully addresses the upstream needs reported in this section. The statement Q1.15 has little support. This is surprising and contradictory to Q1.11. We assume that upstream developers are not interested in the individual project but in the overall usage. 4. DOWNSTREAM DEVELOPER NEEDS This section discusses the downstream information needs. 4.1 Needs Related to Selection An overview of the responses to our questions on selectionrelated information needs can be seen bellow. Q4.1. Whether the project&apos;s code works. (DN-5) Q4.2. How intensively the project </context>
</contexts>
<marker>[9]</marker>
<rawString>Mircea Lungu, Michele Lanza, Tudor Gı̂rba, and Romain Robbes. The Small Project Observatory: Visualizing software ecosystems. Science of Computer Programming, Elsevier, 75(4):264–275, April 2010.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrew Begel</author>
<author>Yit Phang Khoo</author>
<author>Thomas Zimmermann</author>
</authors>
<title>Codebook: discovering and exploiting relationships in software repositories.</title>
<date>2010</date>
<booktitle>In Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 1, ICSE ’10,</booktitle>
<pages>125--134</pages>
<publisher>ACM.</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="20085" citStr="[10]" startWordPosition="3083" endWordPosition="3083">hanism. (Q4.13) There is one Likert item that stands out because of the prevalence of undecided answers. This indicates either a badly-phrased statement or participant lack of experience with notification systems. Downstream developers want to know the impact before updating to the latest version. This includes monitoring the upstream evolution and preview information of changes in implementation details. 4.4 Discussion of Downstream Findings The results show that upstream identity is not relevant to developers. This is the opposite of what developers working in a closed-source context report [10]. In an empirical study on library updates with a collection of Java open-source programs, Dietrich et al. show that current practices do not reveal potential impacts when using a newer API version [11]. A solution to this problem and similar ones that can be automatically applied to largescale software ecosystem development is needed and has the promise of adoption by developers. 5. DEVELOPER MOTIVATIONS 5.1 Upstream Motivations For the upstream, the motivation“Strengthening self-esteem” is slightly less supported than“Maintaining downstream compatibility”, though both are strongly supported.</context>
<context position="26552" citStr="[10]" startWordPosition="4100" endWordPosition="4100"> avoid overloading our respondents with too many questions. This however, limits the generality of our results with respect to the needs. 8. RELATED WORK Ko et al. [12] conducted a study in finding information needs in development teams. Their findings include 21 different types of information in seven categories. The majority refer to knowledge of software artifacts or co-workers. Seichter et al. [13] examine an information retrieval management system for software artifacts to improve collaboration. They define types of interactions but do not declare specific information needs. Begel et al. [10] asked programmers inside Microsoft company about inter-team collaboration problems. They identified and grouped 31 information needs into eight categories. Phillips et al. [14] identify information needs to integrate branched version of a software project. They found four needs: Identifying conflicts before they arise, monitoring features with their dependencies, tracking measured data about number of bugs, test results etc. Jansen reports that the choices that developers make are not always technical, but they are also business related [15]. 9. CONCLUSION Our findings after interviewing a nu</context>
</contexts>
<marker>[10]</marker>
<rawString>Andrew Begel, Yit Phang Khoo, and Thomas Zimmermann. Codebook: discovering and exploiting relationships in software repositories. In Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 1, ICSE ’10, pages 125–134, New York, NY, USA, 2010. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jens Dietrich</author>
<author>Kamil Jezek</author>
<author>Premek Brada</author>
</authors>
<title>Broken promises: An empirical study into evolution problems in java programs caused by library upgrades.</title>
<date>2014</date>
<booktitle>In Software Maintenance, Reengineering and Reverse Engineering (CSMR-WCRE), 2014 Software Evolution Week-IEEE Conference on,</booktitle>
<pages>64--73</pages>
<publisher>IEEE,</publisher>
<contexts>
<context position="20287" citStr="[11]" startWordPosition="3118" endWordPosition="3118">on systems. Downstream developers want to know the impact before updating to the latest version. This includes monitoring the upstream evolution and preview information of changes in implementation details. 4.4 Discussion of Downstream Findings The results show that upstream identity is not relevant to developers. This is the opposite of what developers working in a closed-source context report [10]. In an empirical study on library updates with a collection of Java open-source programs, Dietrich et al. show that current practices do not reveal potential impacts when using a newer API version [11]. A solution to this problem and similar ones that can be automatically applied to largescale software ecosystem development is needed and has the promise of adoption by developers. 5. DEVELOPER MOTIVATIONS 5.1 Upstream Motivations For the upstream, the motivation“Strengthening self-esteem” is slightly less supported than“Maintaining downstream compatibility”, though both are strongly supported. Q2.1. I want to provide help to clients. (UM-2) Q2.2. I want to notify clients of changes ot maintain compatibility. (UM-2) Q2.3. I follow my own vision of the project. (UM-2 / UM-1) Q2.4. It keeps me </context>
</contexts>
<marker>[11]</marker>
<rawString>Jens Dietrich, Kamil Jezek, and Premek Brada. Broken promises: An empirical study into evolution problems in java programs caused by library upgrades. In Software Maintenance, Reengineering and Reverse Engineering (CSMR-WCRE), 2014 Software Evolution Week-IEEE Conference on, pages 64–73. IEEE, 2014.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrew J Ko</author>
<author>Robert DeLine</author>
<author>Gina Venolia</author>
</authors>
<title>Information needs in collocated software development teams.</title>
<date>2007</date>
<booktitle>In Proceedings of the 29th international conference on Software Engineering, ICSE ’07,</booktitle>
<pages>344--353</pages>
<publisher>IEEE Computer Society.</publisher>
<location>Washington, DC, USA,</location>
<contexts>
<context position="26116" citStr="[12]" startWordPosition="4034" endWordPosition="4034">re does not use balanced keying, and therefore is subject to acquiescence bias. The results of our study depend on the selected participants. Our test population was convenience sampled, the generalizability of our study is limited. The quantitative approach derives questions that are related to the quantitative approach but there are times when there is only one question per one need. We settled for this approach since we wanted to avoid overloading our respondents with too many questions. This however, limits the generality of our results with respect to the needs. 8. RELATED WORK Ko et al. [12] conducted a study in finding information needs in development teams. Their findings include 21 different types of information in seven categories. The majority refer to knowledge of software artifacts or co-workers. Seichter et al. [13] examine an information retrieval management system for software artifacts to improve collaboration. They define types of interactions but do not declare specific information needs. Begel et al. [10] asked programmers inside Microsoft company about inter-team collaboration problems. They identified and grouped 31 information needs into eight categories. Phillip</context>
</contexts>
<marker>[12]</marker>
<rawString>Andrew J. Ko, Robert DeLine, and Gina Venolia. Information needs in collocated software development teams. In Proceedings of the 29th international conference on Software Engineering, ICSE ’07, pages 344–353, Washington, DC, USA, 2007. IEEE Computer Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dominik Seichter</author>
<author>Deepak Dhungana</author>
<author>Andreas Pleuss</author>
<author>Benedikt Hauptmann</author>
</authors>
<title>Knowledge management in software ecosystems: software artefacts as first-class citizens.</title>
<date>2010</date>
<booktitle>In Proceedings of the Fourth European Conference on Software Architecture: Companion Volume,</booktitle>
<pages>119--126</pages>
<publisher>ACM,</publisher>
<contexts>
<context position="26353" citStr="[13]" startWordPosition="4070" endWordPosition="4070">quantitative approach derives questions that are related to the quantitative approach but there are times when there is only one question per one need. We settled for this approach since we wanted to avoid overloading our respondents with too many questions. This however, limits the generality of our results with respect to the needs. 8. RELATED WORK Ko et al. [12] conducted a study in finding information needs in development teams. Their findings include 21 different types of information in seven categories. The majority refer to knowledge of software artifacts or co-workers. Seichter et al. [13] examine an information retrieval management system for software artifacts to improve collaboration. They define types of interactions but do not declare specific information needs. Begel et al. [10] asked programmers inside Microsoft company about inter-team collaboration problems. They identified and grouped 31 information needs into eight categories. Phillips et al. [14] identify information needs to integrate branched version of a software project. They found four needs: Identifying conflicts before they arise, monitoring features with their dependencies, tracking measured data about numbe</context>
</contexts>
<marker>[13]</marker>
<rawString>Dominik Seichter, Deepak Dhungana, Andreas Pleuss, and Benedikt Hauptmann. Knowledge management in software ecosystems: software artefacts as first-class citizens. In Proceedings of the Fourth European Conference on Software Architecture: Companion Volume, pages 119–126. ACM, 2010.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shaun Phillips</author>
<author>Guenther Ruhe</author>
<author>Jonathan Sillito</author>
</authors>
<title>Information needs for integration decisions in the release process of large-scale parallel development.</title>
<date>2012</date>
<booktitle>In Proceedings of the ACM 2012 conference on Computer Supported Cooperative Work,</booktitle>
<pages>1371--1380</pages>
<publisher>ACM,</publisher>
<contexts>
<context position="26729" citStr="[14]" startWordPosition="4125" endWordPosition="4125">d a study in finding information needs in development teams. Their findings include 21 different types of information in seven categories. The majority refer to knowledge of software artifacts or co-workers. Seichter et al. [13] examine an information retrieval management system for software artifacts to improve collaboration. They define types of interactions but do not declare specific information needs. Begel et al. [10] asked programmers inside Microsoft company about inter-team collaboration problems. They identified and grouped 31 information needs into eight categories. Phillips et al. [14] identify information needs to integrate branched version of a software project. They found four needs: Identifying conflicts before they arise, monitoring features with their dependencies, tracking measured data about number of bugs, test results etc. Jansen reports that the choices that developers make are not always technical, but they are also business related [15]. 9. CONCLUSION Our findings after interviewing a number of 75 developers corroborate almost all the needs discovered in our previous, qualitative study. We conclunde that there is a lack of adequate tool support for developers w</context>
</contexts>
<marker>[14]</marker>
<rawString>Shaun Phillips, Guenther Ruhe, and Jonathan Sillito. Information needs for integration decisions in the release process of large-scale parallel development. In Proceedings of the ACM 2012 conference on Computer Supported Cooperative Work, pages 1371–1380. ACM, 2012.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slinger Jansen</author>
</authors>
<title>How quality attributes of platform architectures influence software ecosystems.</title>
<date>2013</date>
<booktitle>In Proceedings of the 1st Workshop on Ecosystem Architectures,</booktitle>
<contexts>
<context position="27100" citStr="[15]" startWordPosition="4180" endWordPosition="4180">ot declare specific information needs. Begel et al. [10] asked programmers inside Microsoft company about inter-team collaboration problems. They identified and grouped 31 information needs into eight categories. Phillips et al. [14] identify information needs to integrate branched version of a software project. They found four needs: Identifying conflicts before they arise, monitoring features with their dependencies, tracking measured data about number of bugs, test results etc. Jansen reports that the choices that developers make are not always technical, but they are also business related [15]. 9. CONCLUSION Our findings after interviewing a number of 75 developers corroborate almost all the needs discovered in our previous, qualitative study. We conclunde that there is a lack of adequate tool support for developers working in an ecosystem context. We believe that at the intersection of strong information needs, inappropriate practices, and a new research field, lays great potential for future impactful research. Acknowledgments. We thank Andrei Chis for valuable feedback on this paper. We gratefully acknowledge the financial support of the Swiss National Science Foundation for the</context>
</contexts>
<marker>[15]</marker>
<rawString>Slinger Jansen. How quality attributes of platform architectures influence software ecosystems. In Proceedings of the 1st Workshop on Ecosystem Architectures, 2013.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>
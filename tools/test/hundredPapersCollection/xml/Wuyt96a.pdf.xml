<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<table confidence="0.9322119">
Classmanagement using Logical Queries
Application of a
Reective User Interface Builder
Roel Wuyts
Programming Technology Lab
Vrije Universiteit Brussel Pleinlaan   Brussel Belgium
EMail  rwuytsis vub ac be
Anon FTP progftp vub ac be
WWW progwww vub ac be
January  
</table>
<sectionHeader confidence="0.954937" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.977051133333333">
Current browsers for objectoriented lan
guages suer from restricted query capabil
ities that only allow for classoriented views
on the classsystem As a result browsers are
very poor in providing support for software
engineering techniques that go beyond single
classes like frameworks contracts and design
patterns This paper proposes the combina
tion of a logical query language and user in
terface components as a foundation for non
classoriented customizable browsers able to
support recent and future objectoriented soft
ware engineering techniques Validation of
this proposal is done by building browsers for
dierent domains in Smalltalk
</bodyText>
<sectionHeader confidence="0.963848" genericHeader="method">
 Introduction
</sectionHeader>
<bodyText confidence="0.982697701754386">
Recent programming environments
use browsers to permit browsing and editing
of source code Where in classic imperative
programming languages like Pascal a simple
editor suces objectoriented languages need
more sophisticated tools due to the scattering
of sourcecode all over the classsystem In
such systems the browser is the key to unlock
the world of objectoriented programming
Since software engineering techniques in
the past were essentially classbased so were
browsers The primary static relation between
classes ie inheritance was also supported
However recent techniques are shifting from
single classes to more elaborate relations be
tween classes for example frameworks con
tracts and design patterns   
 Cur
rent classbased browsers fail to accommodate
these new insights due to two problems The
rst is the lack of a sophisticated query system
that enables queries ranging over the whole
classsystem The second problem is the lack
of customizability of the queries and of the
user interface used to present their results
To address the raised problems this paper
proposes the use of a logic programming lan
guage as querymechanism for questioning the
classsystem and custom user interface com
ponents for building the user interface The
logic programming language enables strong
queries and cannot only range over classes
but over the full classsystem including in
stance and class variables methods and user
de ned facts It is also explicit giving the
user the power of adding facts and rules and
using own queries The custom user interface
components are used as prefabricated build
ing blocks that are easily adapted using a re
ective user interface builder
VisualWorks Smalltalk   was used as the
programming environment for validating the
proposed mechanism First a logic program
ming language was implemented to serve as
query language Then the already existing re
ective User Interface Builder ApplFLab was
used to build the custom user interface com
ponents Afterwards several browsers were
constructed to browse classes and more com
plicated structures
This paper is organized as follows The two
following sections will further introduce the
two basic concepts in more detail The next
section is concerned with highend customiz
able browsers The last topic covered before
the conclusion demonstrates the use of our
concepts in building a browser for the Bridge
</bodyText>
<figure confidence="0.7052302">
design pattern

 The Logic Programming
Language
Logic programming languages are declarative
</figure>
<bodyText confidence="0.962955913043478">
and multidirectional languages using logical
terms to express facts rules and queries Facts
and rules are used to write down information
while the queries allow to question this infor
mation Using a logic programming language
to express queries has the advantage that al
though the queries are very powerful the lan
guage is easy to understand and use
Implementations of logic programming lan
guages use the SLDresolution algorithm to
implement the inference mechanism that takes
care of handling the queries More elaborate
information about use and implementations of
logic programming languages can be found in
   A small logic programming language
based on the approach used in  was imple
mented in Smalltalk to use as query mecha
nism We will rst give some example facts
rules and queries that demonstrate the basic
functionality To begin with we will add
facts for every class we want to take in account
by giving the name of the class the name
of the superclass and an identi er classIn
</bodyText>
<figure confidence="0.745446285714286">
cluded 
Dictionary Object classIncluded
Collection Object classIncluded
OrderedCollection Collection classIncluded
MySpecialCollection OrderedCollection
classIncluded

</figure>
<bodyText confidence="0.958437561403509">
This adding of facts is only necessary be
cause of the decision that was taken to sep
arate the logic programming language from
the Smalltalk class system This separation
ensures the generality of the query language
since it is not based on a speci c language or
classsystem We will now write a very simple
rule to describe what a class is and when a
class is a direct subclass 
isClass class  class X classIncluded
isDirectSubclass class super  class super
classIncluded
In these rules nding values for the vari
ables simply comes down to matching pat
terns The next rule that describes a hierarchy
of classes is already more interesting 
inHierarchyroot class  isDirectSubclass root
class or
isDirectSubclassroot classsuper and inHierar
chyroot classsuper
This rule features inference brackets the
logical operators and and or and recur
sion Besides these facts concerning the class
system itself users are also able to add facts
speci c for their situation such as for example
MySpecialCollection author Mike
a note concerning the notation variables are di
rectly preceded by a question mark
the logical opera
tions are or and and
MySpecialCollection version sub
MySpecialCollection nottested
Having de ned some facts and rules it is
time to ask some queries To get for example
a list of all the classes we can simply pose 
isClassX
The dierent values for X will be the classes
present Facts and rules can be also be com
bined 
isDirectSubclass OrderedCollection class and
class author Mike
Given the facts present this query will re
turn the name MySpecialCollection
As can be seen the implemented language
is rather classic An exception is the feature
that makes it possible to use Smalltalk blocks
as a predicate for rules or queries This is the
only place where Smalltalk can be used in the
logic programming language Such use of a
Smalltalk block takes the form of
Smalltalk block arguments 
the arguments being logical variables To
demonstrate how a Smalltalk block could be
used as predicate we make a rule for abstract
classes that states that a class is abstract if it
has at least one method that returns self sub
classResponsibility as is common practice in
</bodyText>
<equation confidence="0.694358666666667">
the Smalltalk community 
abstractabs  isClassabs and
absName
Smalltalk at absName
whichSelectorsReferTo subclassResponsibility
isEmpty not abs
</equation>
<bodyText confidence="0.88827805882353">
Almost the same result could be accom
plished by adding a fact and a rule of the form

nameofclass abstract
abstractabs isClassabsand abs abstract
The former formulation has the advantage
of being smaller since in the latter facts need
to be supplied for every abstract class How
ever the latter is more general for two reasons
First of all it is independent from Smalltalk
since it only uses logical facts and rules Sec
ondly the smalltalk block is just a predicate
and thus serves only as a lter to reject some
elements and keep others
The next section will introduce the custom
user interface components and the user inter
face builder that is used to create and manip
</bodyText>
<figure confidence="0.822054875">
ulate these components ApplFLab
 The User Interface
Components
The re
ective user interface builder UIB
used is ApplFLab Application Framework

Laboratory a UIB based on Parcplaces Vi
</figure>
<bodyText confidence="0.970967666666667">
sualWorks Although the VisualWorks UIB is
a proven development tool that is well inte
grated with the underlying Smalltalk develop
ment environment it lacks a profound mech
anism for reusing user interface components
   ApplFLab provides this reuse abil
ity through user interface components appli
cations in which part of the domain knowledge
has to be speci ed when the component is used
in an application User interface components
can be nested resulting in larger components
for which again speci cations can be given
Take for example an application that displays
a list and then waits untill the user presses a
continue button beneath the list Reusing this
application is ne but not on an asis basis 
it might be necessary to change the label of
the button to OK ApplFLab provides user
friendly tools that enable the programmer of
the user interface component to express that
the label of the button should be lled in when
the user uses the component
For the tools and browsers described in the
next sections two layers of components were
constructed First some base components
were made lists buttons text elds and text
editors based on existing VisualWorks com
ponents but with simple inputoutput behav
ior making it easy to link components with
one another More advanced components were
built using these base components represent
ing higher level reusable parts of browsers
The most important of these components are
the QueryList Classlist MethodList and Ed
itSpace These components can be used as
prefabricated browser building blocks or can
be adapted to address more speci c needs
Using the basic components tools were
build to add change and remove facts rules
and queries Since these tools were con
structed with the user interface components
they can easily be adapted to the taste of the
user
The next sections show the combination
with the logic programming language on two
domains To begin with class browsers are
made that are far more powerful than the
browsers that are standard provided thus
showing the validity of the concept After
wards a browser for a design pattern is made
showing how new programming techniques
can be supported by browsers using the com
bination of logic query language and user in
terface components
</bodyText>
<sectionHeader confidence="0.42499" genericHeader="method">
 Class Browsers
</sectionHeader>
<bodyText confidence="0.980480886363636">
The rst class browser built was a simulation
of the System Browser which is a standard
tool in the VisualWorks Smalltalk environ
ment that enables the programmer to have a
look at all the classes available their de nition
and their methods see gure  This browser
can be simulated using only four queries and
ve user interface components thus showing
the generality of the concept
Next a simple browser was build that en
ables to walk through the classsystem by ap
plying queries and includes a backtrack fa
cility see gure  The facts and rules are
those used in the logic programming language
section The idea is to provide a standard set
of facts rules and queries and let the user
extend or modify these using the tools de
scribed in the previous section to tailor the
functionality of the browser One can think
of information concerning versions authors or
frameworks Customized queries can then im
mediately be formulated and used for exam
ple
isClass class and abstractclass and frame
workclass BrowserFramework
that returns all the abstract classes in
the framework BrowserFramework given the
two rules abstract and framework that respec
tively return whether class is abstract and
whether or not it belongs to a certain frame
work
The programmer is now able to paint a
browser using some of the browser user inter
face components The result is then a class
oriented browser with customizable function
ality  new facts rules and queries can be
edited and applied  and customizable inter
face
To demonstrate the extendibility the sim
ple browser was extended to take methods into
account This merely comes down to adding
facts of the form
class methodName methodIncluded
and some more rules
</bodyText>
<equation confidence="0.7535375">
hasMethodclass method 
class method methodIncluded
sameProtocol class class methods 
hasMethod
class methods and hasMethodclass meth
ods
</equation>
<bodyText confidence="0.980656174603174">
This last rule can be used to compare meth
ods from classes This is very important in
methodoriented browsers to enable the com
parison of protocols of classes
Once the functionality is extended by sup
plying facts rules and queries that take meth
ods into account the interface can be extended

with for example a MethodList component
The resulting browser is depicted in gure 
The resulting browser demonstrates that
the customizability oered by combining our
explicit logic programming language and user
interface components is endless Next sec
tion will demonstrate this by constructing a
browser for the bridge design pattern
 Bridge Pattern Browser
Design patterns are solutions to common de
sign problems that have evolved over time and
are elegant and welldesigned 
   An ex
ample is the bridge design pattern that de
scribes a system in which an abstraction is
decoupled from its implementation such that
both can vary independently This gives rise
to a abstraction hierarchy with as root the so
called abstraction class and a implementa
tion hierarchy where the implementor class
is the root The abstraction and implemen
tor class are bridged by an aggregation re
lation This aggregation is the rst part of
the bridge pattern and can be implemented
in dierent ways  using an instance vari
able a dictionary with associations between
abstraction classes and implementor counter
parts or a global variable For this dierent
implementations dierent types of aggrega
tion were de ned  instancevariable dictio
nary and globalvariable The second part of
the bridge pattern is formed by the methods of
the abstraction class the protocol Methods
of this protocol are used on the implementor
side to implement operations
Current programming environments pro
vide almost no tools that support new pro
gramming techniques like design patterns To
demonstrate that a logic query language and
user interface components can be used to cre
ate browsers that support such techniques a
browser for the bridge pattern was build As
suming that we have the facts and rules of the
previous section only one kind of fact is nec
essary to obtain such browser ie for each
bridge design pattern used we state the fol
lowing 
BridgePattern Example Window Xwindow instance
variable myReference
This fact de nes a bridgePattern with name
Example using Window as the abstraction
class Xwindow as the implementor class and
an aggregation of type instancevariable using
myReference to do the reference We can then
de ne some rules that facilitate working with
</bodyText>
<table confidence="0.925329444444445">
this fact 
allBridgePatterns bridge
 BridgePattern bridge abstraction implementor
inst ref
bridgeParticipants bridge abstraction implemen
tor  BridgePatternbridge abstractionimplemen
tor inst ref
bridgeAggregation bridge inst ref  BridgePat
tern bridge abstraction implementor inst ref
</table>
<bodyText confidence="0.92429825">
We can now obtain the protocol of the
bridgepattern the abstraction and implemen
torhierarchies and the used reference types us
ing following rules 
</bodyText>
<figure confidence="0.796904222222222">
protocol bridge prot  bridgeParticipants
bridge abstraction implementor
and protocol abstraction prot
abstractionHierarchy bridge absClass 
bridgeParticipants bridge abstraction
implementor and inHierarchy abstraction ab
sClass
referenceTypes type  bridgeAggregation bridge
type ref
</figure>
<bodyText confidence="0.944683857142857">
The user interface that was constructed for
this browser resembles the OMTlike scheme
given in   It is shown in gure  This exam
ple shows how creating a highly sophisticated
browser can be done using just one fact some
rules and a user interface built using some
custom components
</bodyText>
<sectionHeader confidence="0.892048" genericHeader="method">
 Conclusion
</sectionHeader>
<bodyText confidence="0.994932117647059">
To address two problems faced by browsers
in recent programming environments the ab
sence of a sophisticated query language and
the lack of customizability this paper pro
poses the use of a logical query language and
custom user interface components Not only
does this combination prove to be powerful
thanks to the logic programming language
the openendedness ensures support of dier
ent programming techniques To claim this
statement browsers were build in Smalltalk
that demonstrate the power and customiz
ability on dierent domains Such browsers
are not only keys to unlock the rich world
of objectoriented programming they are the
master key to open just those doors the pro
grammer wants to enter
</bodyText>
<sectionHeader confidence="0.78088" genericHeader="method">
 Acknowledgements
</sectionHeader>
<bodyText confidence="0.7866635">
I wish to thank following persons for their
important contributions that made this work
</bodyText>
<figure confidence="0.964553036363636">
possible  prof dr Theo DHondt dr
Patrick Steyaert Serge Demeyer Koen De
Hondt Wim Codenie and Carine Lucas
References
 H Abelson GJ Sussman and J Suss
man Structure and interpretation of

computer programs MIT Press Cam
bridge 

 WF Clocksin and CS Mellish Pro
gramming in Prolog SpringerVerlag
Berlin 

 E Gamma R Helm R Johnson and
J Vlissides Design Patterns Addison
Wesley Reading Massachusets 

 PD Gray and R Mohamed Smalltalk
  A Practical Introduction Pitman


 R Helm IM Holland and D Gan
gopadhyay Contracts Specifying be
havioural composition in objectoriented
systems pages 
 OOPSLA
ECOOP
 ACM Press 
 New
York
 RE Johnson and B Foote Design
ing reusable classes Journal of Object
Oriented Programming  

 RE Johnson and VF Russo Doc
umenting frameworks using patterns
pages   OOPSLA ACM Press

 NewYork
 Parcplace Systems VisualWorks Tuto
rial 


W Pree Design Pat
terns for ObjectOriented Software Devel
opment AddisonWesley Reading Mas
sachusets 

 L Sterling and E Shapiro The art of
Prolog The MIT Press Cambridge 

 Patrick Steyaert Koen De Hondt Serge
Demeyer and Niels Boyen Re
ective ap
</figure>
<reference confidence="0.857219769230769">
plication builders In Chris Zimmermann
editor Advances in ObjectOriented Met
alevel Architectures and Reection CRC
Press Inc Boca Raton Florida 

 Patrick Steyaert Koen De Hondt Serge
Demeyer and Marleen De Molder A
Layered Approach to Dedicated Appli
cation Builders Based on Application
Frameworks In D Patel Y Sun
and S Patel editors Proceedings of the
 International Conference on Object
Oriented Information Systems pages
</reference>
<figure confidence="0.924223">
 SpringerVerlag 

 Figures

</figure>
<figureCaption confidence="0.548832">
Figure  SystemBrowser
Figure  SimpleQueryBrowser
Figure  QuerySystemBrowser

Figure  BridgePatternBrowser
</figureCaption>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.192959">
<title confidence="0.986214666666667">Classmanagement using Logical Queries Application of a Reective User Interface Builder</title>
<author confidence="0.430405">Roel Wuyts</author>
<affiliation confidence="0.5819845">Programming Technology Lab Vrije Universiteit Brussel Pleinlaan   Brussel Belgium</affiliation>
<abstract confidence="0.953438">EMail  rwuytsis vub ac be Anon FTP progftp vub ac be WWW progwww vub ac be January   Abstract Current browsers for objectoriented lan guages suer from restricted query capabil ities that only allow for classoriented views on the classsystem As a result browsers are very poor in providing support for software engineering techniques that go beyond single classes like frameworks contracts and design patterns This paper proposes the combina tion of a logical query language and user in terface components as a foundation for non classoriented customizable browsers able to support recent and future objectoriented soft ware engineering techniques Validation of this proposal is done by building browsers for dierent domains in Smalltalk</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>